
Dual_OLED_Basic_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004000  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080041a0  080041a0  000141a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042f0  080042f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080042f0  080042f0  000142f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042f8  080042f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004300  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000070  08004370  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000540  08004370  00020540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af9b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d2  00000000  00000000  0002b03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002c910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002d2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189ac  00000000  00000000  0002dc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0f6  00000000  00000000  000465cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e0f  00000000  00000000  000526c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dc4d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003090  00000000  00000000  000dc524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004188 	.word	0x08004188

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004188 	.word	0x08004188

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

extern "C" PUTCHAR_PROTOTYPE
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	2201      	movs	r2, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <__io_putchar+0x20>)
 8000596:	f002 fa4c 	bl	8002a32 <HAL_UART_Transmit>
	return ch;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000e0 	.word	0x200000e0

080005a8 <_ZN4OLED15set_I2C_AddressEh>:
																// Note, this variable is PRIVATE
		uint16_t CurrentX = 0;
		uint16_t CurrentY = 0;
		uint8_t Initialized = 0;
	public:
		void set_I2C_Address(unsigned char I2C_address)
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
		{
			//printf("OLED Address : 0x%.2X\r\n", I2C_address);
			_I2C_address = I2C_address << 1;
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	701a      	strb	r2, [r3, #0]
			//_I2C_address = I2C_address << 1;
		}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <_ZN4OLED17oled_WriteCommandEh>:
//		{
//			HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
//			HAL_MAX_DELAY);
//		}

		void oled_WriteCommand(uint8_t incoming_byte)
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af04      	add	r7, sp, #16
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	70fb      	strb	r3, [r7, #3]
//			printf("I2C address being used : 0x%.2X || command byte : 0x%.2X \r\n",
//					_I2C_address, incoming_byte);
			// 0x3c --> 0x78
			// 0x3d --> 0x7A

			status = HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, _I2C_address, 0x00, 1,
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b299      	uxth	r1, r3
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	9302      	str	r3, [sp, #8]
 80005e4:	2301      	movs	r3, #1
 80005e6:	9301      	str	r3, [sp, #4]
 80005e8:	1cfb      	adds	r3, r7, #3
 80005ea:	9300      	str	r3, [sp, #0]
 80005ec:	2301      	movs	r3, #1
 80005ee:	2200      	movs	r2, #0
 80005f0:	4810      	ldr	r0, [pc, #64]	; (8000634 <_ZN4OLED17oled_WriteCommandEh+0x68>)
 80005f2:	f001 f933 	bl	800185c <HAL_I2C_Mem_Write>
 80005f6:	4603      	mov	r3, r0
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <_ZN4OLED17oled_WriteCommandEh+0x6c>)
 80005fc:	701a      	strb	r2, [r3, #0]
					&incoming_byte, 1,
					HAL_MAX_DELAY);

			printf("status : %d \r\n", status);
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <_ZN4OLED17oled_WriteCommandEh+0x6c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4619      	mov	r1, r3
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <_ZN4OLED17oled_WriteCommandEh+0x70>)
 8000606:	f002 fdbb 	bl	8003180 <iprintf>

			if (status != HAL_OK)
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <_ZN4OLED17oled_WriteCommandEh+0x6c>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d00c      	beq.n	800062c <_ZN4OLED17oled_WriteCommandEh+0x60>
			{
				printf("ERROR TRANSMITTING I2C COMMAND : 0x%.2X  FROM 0x%.2X\r\n",
 8000612:	78fb      	ldrb	r3, [r7, #3]
 8000614:	4619      	mov	r1, r3
						incoming_byte, _I2C_address);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	781b      	ldrb	r3, [r3, #0]
				printf("ERROR TRANSMITTING I2C COMMAND : 0x%.2X  FROM 0x%.2X\r\n",
 800061a:	461a      	mov	r2, r3
 800061c:	4808      	ldr	r0, [pc, #32]	; (8000640 <_ZN4OLED17oled_WriteCommandEh+0x74>)
 800061e:	f002 fdaf 	bl	8003180 <iprintf>
				HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2120      	movs	r1, #32
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <_ZN4OLED17oled_WriteCommandEh+0x78>)
 8000628:	f000 ffba 	bl	80015a0 <HAL_GPIO_WritePin>
			}
		}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	2000008c 	.word	0x2000008c
 8000638:	20000524 	.word	0x20000524
 800063c:	080041a0 	.word	0x080041a0
 8000640:	080041b0 	.word	0x080041b0
 8000644:	40020000 	.word	0x40020000

08000648 <_ZN4OLED14oled_WriteDataEPhj>:

		// Send data
		void oled_WriteData(uint8_t *buffer, size_t buff_size)
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af04      	add	r7, sp, #16
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
		{
//			printf(
//					"I2C Address :  0x%.2X || Writing : 0x%.2x || With size : 0x%d \r\n",
//					_I2C_address, buffer, buff_size);
			HAL_I2C_Mem_Write(&hi2c1, _I2C_address, 0x40, 1, buffer, buff_size,
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b299      	uxth	r1, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	b29b      	uxth	r3, r3
 800065e:	f04f 32ff 	mov.w	r2, #4294967295
 8000662:	9202      	str	r2, [sp, #8]
 8000664:	9301      	str	r3, [sp, #4]
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	2301      	movs	r3, #1
 800066c:	2240      	movs	r2, #64	; 0x40
 800066e:	4803      	ldr	r0, [pc, #12]	; (800067c <_ZN4OLED14oled_WriteDataEPhj+0x34>)
 8000670:	f001 f8f4 	bl	800185c <HAL_I2C_Mem_Write>
			HAL_MAX_DELAY);
		}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	2000008c 	.word	0x2000008c

08000680 <_Z20ssd1306_UpdateScreenR4OLED>:
			printf("OLED Address : 0x%.2X\r\n", _I2C_address);
		}
};

void ssd1306_UpdateScreen(OLED &oled1)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	// depends on the screen height:
	//
	//  * 32px   ==  4 pages
	//  * 64px   ==  8 pages
	//  * 128px  ==  16 pages
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++)
 8000688:	2300      	movs	r3, #0
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b07      	cmp	r3, #7
 8000690:	d81b      	bhi.n	80006ca <_Z20ssd1306_UpdateScreenR4OLED+0x4a>
	{
//		ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
//		ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
//		ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
//		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
		oled1.oled_WriteCommand(0xB0 + i);
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	3b50      	subs	r3, #80	; 0x50
 8000696:	b2db      	uxtb	r3, r3
 8000698:	4619      	mov	r1, r3
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff ff96 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
		oled1.oled_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80006a0:	2100      	movs	r1, #0
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff ff92 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
		oled1.oled_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80006a8:	2110      	movs	r1, #16
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff8e 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
		oled1.oled_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	01db      	lsls	r3, r3, #7
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <_Z20ssd1306_UpdateScreenR4OLED+0x54>)
 80006b6:	4413      	add	r3, r2
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	4619      	mov	r1, r3
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ffc3 	bl	8000648 <_ZN4OLED14oled_WriteDataEPhj>
	for (uint8_t i = 0; i < SSD1306_HEIGHT / 8; i++)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	3301      	adds	r3, #1
 80006c6:	73fb      	strb	r3, [r7, #15]
 80006c8:	e7e0      	b.n	800068c <_Z20ssd1306_UpdateScreenR4OLED+0xc>

	}
}
 80006ca:	bf00      	nop
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000124 	.word	0x20000124

080006d8 <_Z12ssd1306_Fill13SSD1306_COLOR>:

	}
}

void ssd1306_Fill(SSD1306_COLOR color)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006ec:	d20e      	bcs.n	800070c <_Z12ssd1306_Fill13SSD1306_COLOR+0x34>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d101      	bne.n	80006f8 <_Z12ssd1306_Fill13SSD1306_COLOR+0x20>
 80006f4:	2100      	movs	r1, #0
 80006f6:	e000      	b.n	80006fa <_Z12ssd1306_Fill13SSD1306_COLOR+0x22>
 80006f8:	21ff      	movs	r1, #255	; 0xff
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <_Z12ssd1306_Fill13SSD1306_COLOR+0x40>)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	4413      	add	r3, r2
 8000700:	460a      	mov	r2, r1
 8000702:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3301      	adds	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	e7ec      	b.n	80006e6 <_Z12ssd1306_Fill13SSD1306_COLOR+0xe>
	}
}
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	20000124 	.word	0x20000124

0800071c <_ZN4OLEDC1Ev>:
class OLED
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2200      	movs	r2, #0
 8000728:	805a      	strh	r2, [r3, #2]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	809a      	strh	r2, [r3, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2200      	movs	r2, #0
 8000734:	719a      	strb	r2, [r3, #6]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800074a:	f000 fc4d 	bl	8000fe8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800074e:	f000 f977 	bl	8000a40 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000752:	f000 fa3f 	bl	8000bd4 <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 8000756:	f000 fa0f 	bl	8000b78 <_ZL19MX_USART2_UART_Initv>
	MX_I2C1_Init();
 800075a:	f000 f9d9 	bl	8000b10 <_ZL12MX_I2C1_Initv>
	/* USER CODE BEGIN 2 */
	OLED oled1;
 800075e:	f107 0308 	add.w	r3, r7, #8
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ffda 	bl	800071c <_ZN4OLEDC1Ev>
	OLED oled2;
 8000768:	463b      	mov	r3, r7
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ffd6 	bl	800071c <_ZN4OLEDC1Ev>

	oled_status = HAL_I2C_IsDeviceReady(&hi2c1, OLED1_Address, 3, 5);
 8000770:	2305      	movs	r3, #5
 8000772:	2203      	movs	r2, #3
 8000774:	2178      	movs	r1, #120	; 0x78
 8000776:	48ac      	ldr	r0, [pc, #688]	; (8000a28 <main+0x2e4>)
 8000778:	f001 f96a 	bl	8001a50 <HAL_I2C_IsDeviceReady>
 800077c:	4603      	mov	r3, r0
 800077e:	461a      	mov	r2, r3
 8000780:	4baa      	ldr	r3, [pc, #680]	; (8000a2c <main+0x2e8>)
 8000782:	701a      	strb	r2, [r3, #0]

	if (oled_status != HAL_OK)
 8000784:	4ba9      	ldr	r3, [pc, #676]	; (8000a2c <main+0x2e8>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d004      	beq.n	8000796 <main+0x52>
	{
		printf("ERROR WITH I2C CONNECTION \r\n");
 800078c:	48a8      	ldr	r0, [pc, #672]	; (8000a30 <main+0x2ec>)
 800078e:	f002 fd7d 	bl	800328c <puts>
		Error_Handler();
 8000792:	f000 fa61 	bl	8000c58 <Error_Handler>
	}

	HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2120      	movs	r1, #32
 800079a:	48a6      	ldr	r0, [pc, #664]	; (8000a34 <main+0x2f0>)
 800079c:	f000 ff00 	bl	80015a0 <HAL_GPIO_WritePin>
	printf("PROGRAM STARTED\r\n");
 80007a0:	48a5      	ldr	r0, [pc, #660]	; (8000a38 <main+0x2f4>)
 80007a2:	f002 fd73 	bl	800328c <puts>

	// Set I2C addresses
	oled1.set_I2C_Address(0x3C);
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	213c      	movs	r1, #60	; 0x3c
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fefb 	bl	80005a8 <_ZN4OLED15set_I2C_AddressEh>
	//oled1.set_I2C_Address(0x3C);
	oled2.set_I2C_Address(0x3D);
 80007b2:	463b      	mov	r3, r7
 80007b4:	213d      	movs	r1, #61	; 0x3d
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fef6 	bl	80005a8 <_ZN4OLED15set_I2C_AddressEh>

	// Set display OFF
	oled1.oled_WriteCommand(0xAE);
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	21ae      	movs	r1, #174	; 0xae
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ff02 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xAE);
 80007c8:	463b      	mov	r3, r7
 80007ca:	21ae      	movs	r1, #174	; 0xae
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fefd 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	// Set Memory Addressing Mode
	oled1.oled_WriteCommand(0x20);
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	2120      	movs	r1, #32
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff fef7 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x20);
 80007de:	463b      	mov	r3, r7
 80007e0:	2120      	movs	r1, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fef2 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	// 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
	// 10b,Page Addressing Mode (RESET); 11b,Invalid
	oled1.oled_WriteCommand(0x00);
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff feec 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x00);
 80007f4:	463b      	mov	r3, r7
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fee7 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	// Set Page Start Address for Page Addressing Mode,0-7
	oled1.oled_WriteCommand(0xB0);
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	21b0      	movs	r1, #176	; 0xb0
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fee1 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xB0);
 800080a:	463b      	mov	r3, r7
 800080c:	21b0      	movs	r1, #176	; 0xb0
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fedc 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	// Set COM Output Scan Direction
	oled1.oled_WriteCommand(0xC8);
 8000814:	f107 0308 	add.w	r3, r7, #8
 8000818:	21c8      	movs	r1, #200	; 0xc8
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fed6 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xC8);
 8000820:	463b      	mov	r3, r7
 8000822:	21c8      	movs	r1, #200	; 0xc8
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fed1 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//---set low column address
	oled1.oled_WriteCommand(0x00);
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fecb 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x00);
 8000836:	463b      	mov	r3, r7
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fec6 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//---set high column address
	oled1.oled_WriteCommand(0x10);
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2110      	movs	r1, #16
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fec0 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x10);
 800084c:	463b      	mov	r3, r7
 800084e:	2110      	movs	r1, #16
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff febb 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//--set start line address - CHECK
	oled1.oled_WriteCommand(0x40);
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	2140      	movs	r1, #64	; 0x40
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff feb5 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x40);
 8000862:	463b      	mov	r3, r7
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff feb0 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
//	const uint8_t kSetContrastControlRegister = 0x81;
//	oled1.oled_WriteCommand(kSetContrastControlRegister);
//	oled2.oled_WriteCommand(kSetContrastControlRegister);

	//const uint16_t = 0xFF;
	oled1.oled_WriteCommand(0xFF);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	21ff      	movs	r1, #255	; 0xff
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff feaa 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xFF);
 8000878:	463b      	mov	r3, r7
 800087a:	21ff      	movs	r1, #255	; 0xff
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fea5 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//--set segment re-map 0 to 127 - CHECK
	oled1.oled_WriteCommand(0xA1);
 8000882:	f107 0308 	add.w	r3, r7, #8
 8000886:	21a1      	movs	r1, #161	; 0xa1
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fe9f 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xA1);
 800088e:	463b      	mov	r3, r7
 8000890:	21a1      	movs	r1, #161	; 0xa1
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe9a 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//--set normal color
	oled1.oled_WriteCommand(0xA6);
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	21a6      	movs	r1, #166	; 0xa6
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fe94 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xA6);
 80008a4:	463b      	mov	r3, r7
 80008a6:	21a6      	movs	r1, #166	; 0xa6
 80008a8:	4618      	mov	r0, r3
 80008aa:	f7ff fe8f 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
	//--set multiplex ratio(1 to 64) - CHECK
	oled1.oled_WriteCommand(0xA8);
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	21a8      	movs	r1, #168	; 0xa8
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fe89 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xA8);
 80008ba:	463b      	mov	r3, r7
 80008bc:	21a8      	movs	r1, #168	; 0xa8
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fe84 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	// Set multiplex ratio. 128 x 64
//	oled1.oled_WriteCommand(0xFF);
//	oled2.oled_WriteCommand(0xFF);
	oled1.oled_WriteCommand(0x3F);
 80008c4:	f107 0308 	add.w	r3, r7, #8
 80008c8:	213f      	movs	r1, #63	; 0x3f
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe7e 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x3F);
 80008d0:	463b      	mov	r3, r7
 80008d2:	213f      	movs	r1, #63	; 0x3f
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe79 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//0xa4,Output follows RAM content;0xa5,Output ignores RAM content
	oled1.oled_WriteCommand(0xA4);
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	21a4      	movs	r1, #164	; 0xa4
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fe73 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xA4);
 80008e6:	463b      	mov	r3, r7
 80008e8:	21a4      	movs	r1, #164	; 0xa4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe6e 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//-set display offset - CHECK
	oled1.oled_WriteCommand(0xD3);
 80008f0:	f107 0308 	add.w	r3, r7, #8
 80008f4:	21d3      	movs	r1, #211	; 0xd3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fe68 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xD3);
 80008fc:	463b      	mov	r3, r7
 80008fe:	21d3      	movs	r1, #211	; 0xd3
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fe63 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//-not offset
	oled1.oled_WriteCommand(0x00);
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fe5d 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x00);
 8000912:	463b      	mov	r3, r7
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fe58 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//--set display clock divide ratio/oscillator frequency
	oled1.oled_WriteCommand(0xD5);
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	21d5      	movs	r1, #213	; 0xd5
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fe52 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xD5);
 8000928:	463b      	mov	r3, r7
 800092a:	21d5      	movs	r1, #213	; 0xd5
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fe4d 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//--set divide ratio
	oled1.oled_WriteCommand(0xF0);
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	21f0      	movs	r1, #240	; 0xf0
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fe47 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xF0);
 800093e:	463b      	mov	r3, r7
 8000940:	21f0      	movs	r1, #240	; 0xf0
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fe42 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//--set pre-charge period
	oled1.oled_WriteCommand(0xD9);
 8000948:	f107 0308 	add.w	r3, r7, #8
 800094c:	21d9      	movs	r1, #217	; 0xd9
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fe3c 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xD9);
 8000954:	463b      	mov	r3, r7
 8000956:	21d9      	movs	r1, #217	; 0xd9
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe37 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled1.oled_WriteCommand(0x22);
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	2122      	movs	r1, #34	; 0x22
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fe31 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x22);
 800096a:	463b      	mov	r3, r7
 800096c:	2122      	movs	r1, #34	; 0x22
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fe2c 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//--set com pins hardware configuration - CHECK
	oled1.oled_WriteCommand(0xDA);
 8000974:	f107 0308 	add.w	r3, r7, #8
 8000978:	21da      	movs	r1, #218	; 0xda
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff fe26 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xDA);
 8000980:	463b      	mov	r3, r7
 8000982:	21da      	movs	r1, #218	; 0xda
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fe21 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled1.oled_WriteCommand(0x12);
 800098a:	f107 0308 	add.w	r3, r7, #8
 800098e:	2112      	movs	r1, #18
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff fe1b 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x12);
 8000996:	463b      	mov	r3, r7
 8000998:	2112      	movs	r1, #18
 800099a:	4618      	mov	r0, r3
 800099c:	f7ff fe16 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//--set vcomh
	oled1.oled_WriteCommand(0xDB);
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	21db      	movs	r1, #219	; 0xdb
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe10 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xDB);
 80009ac:	463b      	mov	r3, r7
 80009ae:	21db      	movs	r1, #219	; 0xdb
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fe0b 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//0x20,0.77xVcc
	oled1.oled_WriteCommand(0x20);
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	2120      	movs	r1, #32
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fe05 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x20);
 80009c2:	463b      	mov	r3, r7
 80009c4:	2120      	movs	r1, #32
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fe00 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//--set DC-DC enable
	oled1.oled_WriteCommand(0x8D);
 80009cc:	f107 0308 	add.w	r3, r7, #8
 80009d0:	218d      	movs	r1, #141	; 0x8d
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fdfa 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x8D);
 80009d8:	463b      	mov	r3, r7
 80009da:	218d      	movs	r1, #141	; 0x8d
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fdf5 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	//
	oled1.oled_WriteCommand(0x14);
 80009e2:	f107 0308 	add.w	r3, r7, #8
 80009e6:	2114      	movs	r1, #20
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fdef 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0x14);
 80009ee:	463b      	mov	r3, r7
 80009f0:	2114      	movs	r1, #20
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fdea 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	//printf("FLAG\r\n");
	//--turn on SSD1306 panel
	oled1.oled_WriteCommand(0xAF);
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	21af      	movs	r1, #175	; 0xaf
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fde4 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>
	oled2.oled_WriteCommand(0xAF);
 8000a04:	463b      	mov	r3, r7
 8000a06:	21af      	movs	r1, #175	; 0xaf
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fddf 	bl	80005cc <_ZN4OLED17oled_WriteCommandEh>

	// Clear screen
	ssd1306_Fill(White);
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff fe62 	bl	80006d8 <_Z12ssd1306_Fill13SSD1306_COLOR>
	printf("--------------- FLAG ---------------\r\n");
 8000a14:	4809      	ldr	r0, [pc, #36]	; (8000a3c <main+0x2f8>)
 8000a16:	f002 fc39 	bl	800328c <puts>
	ssd1306_UpdateScreen(oled1);
 8000a1a:	f107 0308 	add.w	r3, r7, #8
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fe2e 	bl	8000680 <_Z20ssd1306_UpdateScreenR4OLED>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000a24:	e7fe      	b.n	8000a24 <main+0x2e0>
 8000a26:	bf00      	nop
 8000a28:	2000008c 	.word	0x2000008c
 8000a2c:	20000525 	.word	0x20000525
 8000a30:	080041e8 	.word	0x080041e8
 8000a34:	40020000 	.word	0x40020000
 8000a38:	08004204 	.word	0x08004204
 8000a3c:	08004218 	.word	0x08004218

08000a40 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b094      	sub	sp, #80	; 0x50
 8000a44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	2230      	movs	r2, #48	; 0x30
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fb8e 	bl	8003170 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <_Z18SystemClock_Configv+0xc8>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6c:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <_Z18SystemClock_Configv+0xc8>)
 8000a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a72:	6413      	str	r3, [r2, #64]	; 0x40
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <_Z18SystemClock_Configv+0xc8>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a80:	2300      	movs	r3, #0
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <_Z18SystemClock_Configv+0xcc>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <_Z18SystemClock_Configv+0xcc>)
 8000a8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <_Z18SystemClock_Configv+0xcc>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fb19 	bl	80020e8 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	bf14      	ite	ne
 8000abc:	2301      	movne	r3, #1
 8000abe:	2300      	moveq	r3, #0
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <_Z18SystemClock_Configv+0x8a>
	{
		Error_Handler();
 8000ac6:	f000 f8c7 	bl	8000c58 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fd77 	bl	80025d8 <HAL_RCC_ClockConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	bf14      	ite	ne
 8000af0:	2301      	movne	r3, #1
 8000af2:	2300      	moveq	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <_Z18SystemClock_Configv+0xbe>
	{
		Error_Handler();
 8000afa:	f000 f8ad 	bl	8000c58 <Error_Handler>
	}
}
 8000afe:	bf00      	nop
 8000b00:	3750      	adds	r7, #80	; 0x50
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40007000 	.word	0x40007000

08000b10 <_ZL12MX_I2C1_Initv>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <_ZL12MX_I2C1_Initv+0x60>)
 8000b18:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b1c:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <_ZL12MX_I2C1_Initv+0x64>)
 8000b1e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b32:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b4c:	4807      	ldr	r0, [pc, #28]	; (8000b6c <_ZL12MX_I2C1_Initv+0x5c>)
 8000b4e:	f000 fd41 	bl	80015d4 <HAL_I2C_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	bf14      	ite	ne
 8000b58:	2301      	movne	r3, #1
 8000b5a:	2300      	moveq	r3, #0
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <_ZL12MX_I2C1_Initv+0x56>
	{
		Error_Handler();
 8000b62:	f000 f879 	bl	8000c58 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000008c 	.word	0x2000008c
 8000b70:	40005400 	.word	0x40005400
 8000b74:	000186a0 	.word	0x000186a0

08000b78 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b7e:	4a14      	ldr	r2, [pc, #80]	; (8000bd0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000b80:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000b82:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b88:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b90:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bae:	4807      	ldr	r0, [pc, #28]	; (8000bcc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000bb0:	f001 fef2 	bl	8002998 <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	bf14      	ite	ne
 8000bba:	2301      	movne	r3, #1
 8000bbc:	2300      	moveq	r3, #0
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <_ZL19MX_USART2_UART_Initv+0x50>
	{
		Error_Handler();
 8000bc4:	f000 f848 	bl	8000c58 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200000e0 	.word	0x200000e0
 8000bd0:	40004400 	.word	0x40004400

08000bd4 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <_ZL12MX_GPIO_Initv+0x7c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a17      	ldr	r2, [pc, #92]	; (8000c50 <_ZL12MX_GPIO_Initv+0x7c>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_ZL12MX_GPIO_Initv+0x7c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <_ZL12MX_GPIO_Initv+0x7c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <_ZL12MX_GPIO_Initv+0x7c>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <_ZL12MX_GPIO_Initv+0x7c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2120      	movs	r1, #32
 8000c26:	480b      	ldr	r0, [pc, #44]	; (8000c54 <_ZL12MX_GPIO_Initv+0x80>)
 8000c28:	f000 fcba 	bl	80015a0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000c2c:	2320      	movs	r3, #32
 8000c2e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	4619      	mov	r1, r3
 8000c42:	4804      	ldr	r0, [pc, #16]	; (8000c54 <_ZL12MX_GPIO_Initv+0x80>)
 8000c44:	f000 fb28 	bl	8001298 <HAL_GPIO_Init>

}
 8000c48:	bf00      	nop
 8000c4a:	3720      	adds	r7, #32
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020000 	.word	0x40020000

08000c58 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c78:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c82:	607b      	str	r3, [r7, #4]
 8000c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_I2C_MspInit+0x84>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d12c      	bne.n	8000d30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a17      	ldr	r2, [pc, #92]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cf2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf8:	2312      	movs	r3, #18
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d04:	2304      	movs	r3, #4
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480c      	ldr	r0, [pc, #48]	; (8000d40 <HAL_I2C_MspInit+0x8c>)
 8000d10:	f000 fac2 	bl	8001298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	4a07      	ldr	r2, [pc, #28]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d22:	6413      	str	r3, [r2, #64]	; 0x40
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_I2C_MspInit+0x88>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d30:	bf00      	nop
 8000d32:	3728      	adds	r7, #40	; 0x28
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40005400 	.word	0x40005400
 8000d3c:	40023800 	.word	0x40023800
 8000d40:	40020400 	.word	0x40020400

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_UART_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12b      	bne.n	8000dbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dae:	2307      	movs	r3, #7
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000dba:	f000 fa6d 	bl	8001298 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dbe:	bf00      	nop
 8000dc0:	3728      	adds	r7, #40	; 0x28
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <NMI_Handler+0x4>

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <MemManage_Handler+0x4>

08000de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 f934 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e00a      	b.n	8000e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3a:	f3af 8000 	nop.w
 8000e3e:	4601      	mov	r1, r0
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	60ba      	str	r2, [r7, #8]
 8000e46:	b2ca      	uxtb	r2, r1
 8000e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf0      	blt.n	8000e3a <_read+0x12>
  }

  return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	e009      	b.n	8000e88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fb81 	bl	8000584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dbf1      	blt.n	8000e74 <_write+0x12>
  }
  return len;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_close>:

int _close(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_isatty>:

int _isatty(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f002 f8f2 	bl	800311c <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20020000 	.word	0x20020000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	20000528 	.word	0x20000528
 8000f6c:	20000540 	.word	0x20000540

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f9a:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb0:	4c0b      	ldr	r4, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fbe:	f7ff ffd7 	bl	8000f70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f002 f8b1 	bl	8003128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fbbd 	bl	8000744 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000fd8:	08004300 	.word	0x08004300
  ldr r2, =_sbss
 8000fdc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000fe0:	20000540 	.word	0x20000540

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_Init+0x40>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_Init+0x40>)
 8000ffe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x40>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f90d 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	200f      	movs	r0, #15
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fe22 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f917 	bl	800127e <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f000 f8ed 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000000 	.word	0x20000000
 8001084:	20000008 	.word	0x20000008
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	2000052c 	.word	0x2000052c

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	2000052c 	.word	0x2000052c

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff47 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff5c 	bl	8001114 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff8e 	bl	8001184 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5d 	bl	8001130 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffb0 	bl	80011ec <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	e159      	b.n	8001568 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b4:	2201      	movs	r2, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	f040 8148 	bne.w	8001562 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d005      	beq.n	80012ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d130      	bne.n	800134c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001320:	2201      	movs	r2, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 0201 	and.w	r2, r3, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b03      	cmp	r3, #3
 8001356:	d017      	beq.n	8001388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d123      	bne.n	80013dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	69b9      	ldr	r1, [r7, #24]
 80013d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a2 	beq.w	8001562 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b57      	ldr	r3, [pc, #348]	; (8001580 <HAL_GPIO_Init+0x2e8>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	4a56      	ldr	r2, [pc, #344]	; (8001580 <HAL_GPIO_Init+0x2e8>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142c:	6453      	str	r3, [r2, #68]	; 0x44
 800142e:	4b54      	ldr	r3, [pc, #336]	; (8001580 <HAL_GPIO_Init+0x2e8>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800143a:	4a52      	ldr	r2, [pc, #328]	; (8001584 <HAL_GPIO_Init+0x2ec>)
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a49      	ldr	r2, [pc, #292]	; (8001588 <HAL_GPIO_Init+0x2f0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d019      	beq.n	800149a <HAL_GPIO_Init+0x202>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a48      	ldr	r2, [pc, #288]	; (800158c <HAL_GPIO_Init+0x2f4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d013      	beq.n	8001496 <HAL_GPIO_Init+0x1fe>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a47      	ldr	r2, [pc, #284]	; (8001590 <HAL_GPIO_Init+0x2f8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00d      	beq.n	8001492 <HAL_GPIO_Init+0x1fa>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a46      	ldr	r2, [pc, #280]	; (8001594 <HAL_GPIO_Init+0x2fc>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x1f6>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a45      	ldr	r2, [pc, #276]	; (8001598 <HAL_GPIO_Init+0x300>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d101      	bne.n	800148a <HAL_GPIO_Init+0x1f2>
 8001486:	2304      	movs	r3, #4
 8001488:	e008      	b.n	800149c <HAL_GPIO_Init+0x204>
 800148a:	2307      	movs	r3, #7
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x204>
 800148e:	2303      	movs	r3, #3
 8001490:	e004      	b.n	800149c <HAL_GPIO_Init+0x204>
 8001492:	2302      	movs	r3, #2
 8001494:	e002      	b.n	800149c <HAL_GPIO_Init+0x204>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x204>
 800149a:	2300      	movs	r3, #0
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	f002 0203 	and.w	r2, r2, #3
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	4093      	lsls	r3, r2
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ac:	4935      	ldr	r1, [pc, #212]	; (8001584 <HAL_GPIO_Init+0x2ec>)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3302      	adds	r3, #2
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ba:	4b38      	ldr	r3, [pc, #224]	; (800159c <HAL_GPIO_Init+0x304>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014de:	4a2f      	ldr	r2, [pc, #188]	; (800159c <HAL_GPIO_Init+0x304>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014e4:	4b2d      	ldr	r3, [pc, #180]	; (800159c <HAL_GPIO_Init+0x304>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001508:	4a24      	ldr	r2, [pc, #144]	; (800159c <HAL_GPIO_Init+0x304>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <HAL_GPIO_Init+0x304>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001532:	4a1a      	ldr	r2, [pc, #104]	; (800159c <HAL_GPIO_Init+0x304>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001538:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_GPIO_Init+0x304>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800155c:	4a0f      	ldr	r2, [pc, #60]	; (800159c <HAL_GPIO_Init+0x304>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3301      	adds	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b0f      	cmp	r3, #15
 800156c:	f67f aea2 	bls.w	80012b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3724      	adds	r7, #36	; 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40013800 	.word	0x40013800
 8001588:	40020000 	.word	0x40020000
 800158c:	40020400 	.word	0x40020400
 8001590:	40020800 	.word	0x40020800
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40021000 	.word	0x40021000
 800159c:	40013c00 	.word	0x40013c00

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	619a      	str	r2, [r3, #24]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e12b      	b.n	800183e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d106      	bne.n	8001600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fb5a 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2224      	movs	r2, #36	; 0x24
 8001604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001626:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001636:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001638:	f001 f986 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 800163c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4a81      	ldr	r2, [pc, #516]	; (8001848 <HAL_I2C_Init+0x274>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d807      	bhi.n	8001658 <HAL_I2C_Init+0x84>
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4a80      	ldr	r2, [pc, #512]	; (800184c <HAL_I2C_Init+0x278>)
 800164c:	4293      	cmp	r3, r2
 800164e:	bf94      	ite	ls
 8001650:	2301      	movls	r3, #1
 8001652:	2300      	movhi	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	e006      	b.n	8001666 <HAL_I2C_Init+0x92>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4a7d      	ldr	r2, [pc, #500]	; (8001850 <HAL_I2C_Init+0x27c>)
 800165c:	4293      	cmp	r3, r2
 800165e:	bf94      	ite	ls
 8001660:	2301      	movls	r3, #1
 8001662:	2300      	movhi	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0e7      	b.n	800183e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4a78      	ldr	r2, [pc, #480]	; (8001854 <HAL_I2C_Init+0x280>)
 8001672:	fba2 2303 	umull	r2, r3, r2, r3
 8001676:	0c9b      	lsrs	r3, r3, #18
 8001678:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68ba      	ldr	r2, [r7, #8]
 800168a:	430a      	orrs	r2, r1
 800168c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4a6a      	ldr	r2, [pc, #424]	; (8001848 <HAL_I2C_Init+0x274>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d802      	bhi.n	80016a8 <HAL_I2C_Init+0xd4>
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	3301      	adds	r3, #1
 80016a6:	e009      	b.n	80016bc <HAL_I2C_Init+0xe8>
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016ae:	fb02 f303 	mul.w	r3, r2, r3
 80016b2:	4a69      	ldr	r2, [pc, #420]	; (8001858 <HAL_I2C_Init+0x284>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	099b      	lsrs	r3, r3, #6
 80016ba:	3301      	adds	r3, #1
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	430b      	orrs	r3, r1
 80016c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	495c      	ldr	r1, [pc, #368]	; (8001848 <HAL_I2C_Init+0x274>)
 80016d8:	428b      	cmp	r3, r1
 80016da:	d819      	bhi.n	8001710 <HAL_I2C_Init+0x13c>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1e59      	subs	r1, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ea:	1c59      	adds	r1, r3, #1
 80016ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016f0:	400b      	ands	r3, r1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00a      	beq.n	800170c <HAL_I2C_Init+0x138>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	1e59      	subs	r1, r3, #1
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	fbb1 f3f3 	udiv	r3, r1, r3
 8001704:	3301      	adds	r3, #1
 8001706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800170a:	e051      	b.n	80017b0 <HAL_I2C_Init+0x1dc>
 800170c:	2304      	movs	r3, #4
 800170e:	e04f      	b.n	80017b0 <HAL_I2C_Init+0x1dc>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d111      	bne.n	800173c <HAL_I2C_Init+0x168>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1e58      	subs	r0, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6859      	ldr	r1, [r3, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	440b      	add	r3, r1
 8001726:	fbb0 f3f3 	udiv	r3, r0, r3
 800172a:	3301      	adds	r3, #1
 800172c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf0c      	ite	eq
 8001734:	2301      	moveq	r3, #1
 8001736:	2300      	movne	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	e012      	b.n	8001762 <HAL_I2C_Init+0x18e>
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	1e58      	subs	r0, r3, #1
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6859      	ldr	r1, [r3, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	0099      	lsls	r1, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001752:	3301      	adds	r3, #1
 8001754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001758:	2b00      	cmp	r3, #0
 800175a:	bf0c      	ite	eq
 800175c:	2301      	moveq	r3, #1
 800175e:	2300      	movne	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_I2C_Init+0x196>
 8001766:	2301      	movs	r3, #1
 8001768:	e022      	b.n	80017b0 <HAL_I2C_Init+0x1dc>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d10e      	bne.n	8001790 <HAL_I2C_Init+0x1bc>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1e58      	subs	r0, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6859      	ldr	r1, [r3, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	440b      	add	r3, r1
 8001780:	fbb0 f3f3 	udiv	r3, r0, r3
 8001784:	3301      	adds	r3, #1
 8001786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800178a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178e:	e00f      	b.n	80017b0 <HAL_I2C_Init+0x1dc>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1e58      	subs	r0, r3, #1
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	0099      	lsls	r1, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a6:	3301      	adds	r3, #1
 80017a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	6809      	ldr	r1, [r1, #0]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69da      	ldr	r2, [r3, #28]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6911      	ldr	r1, [r2, #16]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68d2      	ldr	r2, [r2, #12]
 80017ea:	4311      	orrs	r1, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	430b      	orrs	r3, r1
 80017f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0201 	orr.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2220      	movs	r2, #32
 800182a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	000186a0 	.word	0x000186a0
 800184c:	001e847f 	.word	0x001e847f
 8001850:	003d08ff 	.word	0x003d08ff
 8001854:	431bde83 	.word	0x431bde83
 8001858:	10624dd3 	.word	0x10624dd3

0800185c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	4608      	mov	r0, r1
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	4603      	mov	r3, r0
 800186c:	817b      	strh	r3, [r7, #10]
 800186e:	460b      	mov	r3, r1
 8001870:	813b      	strh	r3, [r7, #8]
 8001872:	4613      	mov	r3, r2
 8001874:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001876:	f7ff fc1d 	bl	80010b4 <HAL_GetTick>
 800187a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b20      	cmp	r3, #32
 8001886:	f040 80d9 	bne.w	8001a3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2319      	movs	r3, #25
 8001890:	2201      	movs	r2, #1
 8001892:	496d      	ldr	r1, [pc, #436]	; (8001a48 <HAL_I2C_Mem_Write+0x1ec>)
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 fa9f 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80018a0:	2302      	movs	r3, #2
 80018a2:	e0cc      	b.n	8001a3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_I2C_Mem_Write+0x56>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e0c5      	b.n	8001a3e <HAL_I2C_Mem_Write+0x1e2>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d007      	beq.n	80018d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0201 	orr.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2221      	movs	r2, #33	; 0x21
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2240      	movs	r2, #64	; 0x40
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6a3a      	ldr	r2, [r7, #32]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800190e:	b29a      	uxth	r2, r3
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4a4d      	ldr	r2, [pc, #308]	; (8001a4c <HAL_I2C_Mem_Write+0x1f0>)
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800191a:	88f8      	ldrh	r0, [r7, #6]
 800191c:	893a      	ldrh	r2, [r7, #8]
 800191e:	8979      	ldrh	r1, [r7, #10]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	4603      	mov	r3, r0
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f9be 	bl	8001cac <I2C_RequestMemoryWrite>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d052      	beq.n	80019dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e081      	b.n	8001a3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fb20 	bl	8001f84 <I2C_WaitOnTXEFlagUntilTimeout>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00d      	beq.n	8001966 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2b04      	cmp	r3, #4
 8001950:	d107      	bne.n	8001962 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001960:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e06b      	b.n	8001a3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	781a      	ldrb	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001980:	3b01      	subs	r3, #1
 8001982:	b29a      	uxth	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198c:	b29b      	uxth	r3, r3
 800198e:	3b01      	subs	r3, #1
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d11b      	bne.n	80019dc <HAL_I2C_Mem_Write+0x180>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d017      	beq.n	80019dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	781a      	ldrb	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c6:	3b01      	subs	r3, #1
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1aa      	bne.n	800193a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 fb0c 	bl	8002006 <I2C_WaitOnBTFFlagUntilTimeout>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d00d      	beq.n	8001a10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	2b04      	cmp	r3, #4
 80019fa:	d107      	bne.n	8001a0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e016      	b.n	8001a3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e000      	b.n	8001a3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001a3c:	2302      	movs	r3, #2
  }
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	00100002 	.word	0x00100002
 8001a4c:	ffff0000 	.word	0xffff0000

08001a50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b08a      	sub	sp, #40	; 0x28
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	603b      	str	r3, [r7, #0]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff fb28 	bl	80010b4 <HAL_GetTick>
 8001a64:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	f040 8111 	bne.w	8001c9a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2319      	movs	r3, #25
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4988      	ldr	r1, [pc, #544]	; (8001ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 f9a8 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e104      	b.n	8001c9c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_I2C_IsDeviceReady+0x50>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e0fd      	b.n	8001c9c <HAL_I2C_IsDeviceReady+0x24c>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d007      	beq.n	8001ac6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2224      	movs	r2, #36	; 0x24
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4a70      	ldr	r2, [pc, #448]	; (8001ca8 <HAL_I2C_IsDeviceReady+0x258>)
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f966 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00d      	beq.n	8001b2e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b20:	d103      	bne.n	8001b2a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e0b6      	b.n	8001c9c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b2e:	897b      	ldrh	r3, [r7, #10]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b3c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fab9 	bl	80010b4 <HAL_GetTick>
 8001b42:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	bf0c      	ite	eq
 8001b52:	2301      	moveq	r3, #1
 8001b54:	2300      	movne	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001b72:	e025      	b.n	8001bc0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b74:	f7ff fa9e 	bl	80010b4 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d302      	bcc.n	8001b8a <HAL_I2C_IsDeviceReady+0x13a>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	22a0      	movs	r2, #160	; 0xa0
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	bf0c      	ite	eq
 8001ba0:	2301      	moveq	r3, #1
 8001ba2:	2300      	movne	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb6:	bf0c      	ite	eq
 8001bb8:	2301      	moveq	r3, #1
 8001bba:	2300      	movne	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2ba0      	cmp	r3, #160	; 0xa0
 8001bca:	d005      	beq.n	8001bd8 <HAL_I2C_IsDeviceReady+0x188>
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <HAL_I2C_IsDeviceReady+0x188>
 8001bd2:	7dbb      	ldrb	r3, [r7, #22]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0cd      	beq.n	8001b74 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2220      	movs	r2, #32
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d129      	bne.n	8001c42 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2319      	movs	r3, #25
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4921      	ldr	r1, [pc, #132]	; (8001ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f8da 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e036      	b.n	8001c9c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e02c      	b.n	8001c9c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c50:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c5a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2319      	movs	r3, #25
 8001c62:	2201      	movs	r2, #1
 8001c64:	490f      	ldr	r1, [pc, #60]	; (8001ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f8b6 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e012      	b.n	8001c9c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f4ff af32 	bcc.w	8001aea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001c9a:	2302      	movs	r3, #2
  }
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	00100002 	.word	0x00100002
 8001ca8:	ffff0000 	.word	0xffff0000

08001cac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	4608      	mov	r0, r1
 8001cb6:	4611      	mov	r1, r2
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4603      	mov	r3, r0
 8001cbc:	817b      	strh	r3, [r7, #10]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	813b      	strh	r3, [r7, #8]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f878 	bl	8001dd8 <I2C_WaitOnFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00d      	beq.n	8001d0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfc:	d103      	bne.n	8001d06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e05f      	b.n	8001dca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d0a:	897b      	ldrh	r3, [r7, #10]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001d18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	6a3a      	ldr	r2, [r7, #32]
 8001d1e:	492d      	ldr	r1, [pc, #180]	; (8001dd4 <I2C_RequestMemoryWrite+0x128>)
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 f8b0 	bl	8001e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e04c      	b.n	8001dca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d48:	6a39      	ldr	r1, [r7, #32]
 8001d4a:	68f8      	ldr	r0, [r7, #12]
 8001d4c:	f000 f91a 	bl	8001f84 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00d      	beq.n	8001d72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d107      	bne.n	8001d6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e02b      	b.n	8001dca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d78:	893b      	ldrh	r3, [r7, #8]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	611a      	str	r2, [r3, #16]
 8001d82:	e021      	b.n	8001dc8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d84:	893b      	ldrh	r3, [r7, #8]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d94:	6a39      	ldr	r1, [r7, #32]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f8f4 	bl	8001f84 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00d      	beq.n	8001dbe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d107      	bne.n	8001dba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e005      	b.n	8001dca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dbe:	893b      	ldrh	r3, [r7, #8]
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3718      	adds	r7, #24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	00010002 	.word	0x00010002

08001dd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	4613      	mov	r3, r2
 8001de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de8:	e025      	b.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d021      	beq.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df2:	f7ff f95f 	bl	80010b4 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d302      	bcc.n	8001e08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d116      	bne.n	8001e36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2220      	movs	r2, #32
 8001e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e023      	b.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	0c1b      	lsrs	r3, r3, #16
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d10d      	bne.n	8001e5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	bf0c      	ite	eq
 8001e52:	2301      	moveq	r3, #1
 8001e54:	2300      	movne	r3, #0
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	e00c      	b.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	4013      	ands	r3, r2
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	bf0c      	ite	eq
 8001e6e:	2301      	moveq	r3, #1
 8001e70:	2300      	movne	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d0b6      	beq.n	8001dea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b084      	sub	sp, #16
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e94:	e051      	b.n	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea4:	d123      	bne.n	8001eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ebe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f043 0204 	orr.w	r2, r3, #4
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e046      	b.n	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d021      	beq.n	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef6:	f7ff f8dd 	bl	80010b4 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d302      	bcc.n	8001f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d116      	bne.n	8001f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f043 0220 	orr.w	r2, r3, #32
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e020      	b.n	8001f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	0c1b      	lsrs	r3, r3, #16
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d10c      	bne.n	8001f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	43da      	mvns	r2, r3
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	e00b      	b.n	8001f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	43da      	mvns	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bf14      	ite	ne
 8001f70:	2301      	movne	r3, #1
 8001f72:	2300      	moveq	r3, #0
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d18d      	bne.n	8001e96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f90:	e02d      	b.n	8001fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 f878 	bl	8002088 <I2C_IsAcknowledgeFailed>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e02d      	b.n	8001ffe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d021      	beq.n	8001fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001faa:	f7ff f883 	bl	80010b4 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d302      	bcc.n	8001fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d116      	bne.n	8001fee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f043 0220 	orr.w	r2, r3, #32
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e007      	b.n	8001ffe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff8:	2b80      	cmp	r3, #128	; 0x80
 8001ffa:	d1ca      	bne.n	8001f92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002012:	e02d      	b.n	8002070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f837 	bl	8002088 <I2C_IsAcknowledgeFailed>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e02d      	b.n	8002080 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202a:	d021      	beq.n	8002070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202c:	f7ff f842 	bl	80010b4 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	429a      	cmp	r2, r3
 800203a:	d302      	bcc.n	8002042 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2220      	movs	r2, #32
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	f043 0220 	orr.w	r2, r3, #32
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e007      	b.n	8002080 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	2b04      	cmp	r3, #4
 800207c:	d1ca      	bne.n	8002014 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209e:	d11b      	bne.n	80020d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	f043 0204 	orr.w	r2, r3, #4
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e267      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d075      	beq.n	80021f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002106:	4b88      	ldr	r3, [pc, #544]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b04      	cmp	r3, #4
 8002110:	d00c      	beq.n	800212c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002112:	4b85      	ldr	r3, [pc, #532]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211a:	2b08      	cmp	r3, #8
 800211c:	d112      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800211e:	4b82      	ldr	r3, [pc, #520]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800212a:	d10b      	bne.n	8002144 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212c:	4b7e      	ldr	r3, [pc, #504]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d05b      	beq.n	80021f0 <HAL_RCC_OscConfig+0x108>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d157      	bne.n	80021f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e242      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214c:	d106      	bne.n	800215c <HAL_RCC_OscConfig+0x74>
 800214e:	4b76      	ldr	r3, [pc, #472]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a75      	ldr	r2, [pc, #468]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e01d      	b.n	8002198 <HAL_RCC_OscConfig+0xb0>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x98>
 8002166:	4b70      	ldr	r3, [pc, #448]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a6f      	ldr	r2, [pc, #444]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800216c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b6d      	ldr	r3, [pc, #436]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a6c      	ldr	r2, [pc, #432]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0xb0>
 8002180:	4b69      	ldr	r3, [pc, #420]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a68      	ldr	r2, [pc, #416]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b66      	ldr	r3, [pc, #408]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a65      	ldr	r2, [pc, #404]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a0:	f7fe ff88 	bl	80010b4 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a8:	f7fe ff84 	bl	80010b4 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b64      	cmp	r3, #100	; 0x64
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e207      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	4b5b      	ldr	r3, [pc, #364]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0xc0>
 80021c6:	e014      	b.n	80021f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe ff74 	bl	80010b4 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff70 	bl	80010b4 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	; 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1f3      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	4b51      	ldr	r3, [pc, #324]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0xe8>
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d063      	beq.n	80022c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021fe:	4b4a      	ldr	r3, [pc, #296]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00b      	beq.n	8002222 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800220a:	4b47      	ldr	r3, [pc, #284]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002212:	2b08      	cmp	r3, #8
 8002214:	d11c      	bne.n	8002250 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002216:	4b44      	ldr	r3, [pc, #272]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d116      	bne.n	8002250 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	4b41      	ldr	r3, [pc, #260]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_RCC_OscConfig+0x152>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e1c7      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4937      	ldr	r1, [pc, #220]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800224a:	4313      	orrs	r3, r2
 800224c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224e:	e03a      	b.n	80022c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d020      	beq.n	800229a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002258:	4b34      	ldr	r3, [pc, #208]	; (800232c <HAL_RCC_OscConfig+0x244>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7fe ff29 	bl	80010b4 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002266:	f7fe ff25 	bl	80010b4 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1a8      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002284:	4b28      	ldr	r3, [pc, #160]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4925      	ldr	r1, [pc, #148]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 8002294:	4313      	orrs	r3, r2
 8002296:	600b      	str	r3, [r1, #0]
 8002298:	e015      	b.n	80022c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229a:	4b24      	ldr	r3, [pc, #144]	; (800232c <HAL_RCC_OscConfig+0x244>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe ff08 	bl	80010b4 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a8:	f7fe ff04 	bl	80010b4 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e187      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d036      	beq.n	8002340 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d016      	beq.n	8002308 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_RCC_OscConfig+0x248>)
 80022dc:	2201      	movs	r2, #1
 80022de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e0:	f7fe fee8 	bl	80010b4 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e8:	f7fe fee4 	bl	80010b4 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e167      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_OscConfig+0x240>)
 80022fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x200>
 8002306:	e01b      	b.n	8002340 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_RCC_OscConfig+0x248>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe fed1 	bl	80010b4 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002314:	e00e      	b.n	8002334 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002316:	f7fe fecd 	bl	80010b4 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d907      	bls.n	8002334 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e150      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
 8002328:	40023800 	.word	0x40023800
 800232c:	42470000 	.word	0x42470000
 8002330:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002334:	4b88      	ldr	r3, [pc, #544]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ea      	bne.n	8002316 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8097 	beq.w	800247c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002352:	4b81      	ldr	r3, [pc, #516]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10f      	bne.n	800237e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	4b7d      	ldr	r3, [pc, #500]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	4a7c      	ldr	r2, [pc, #496]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b77      	ldr	r3, [pc, #476]	; (800255c <HAL_RCC_OscConfig+0x474>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d118      	bne.n	80023bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238a:	4b74      	ldr	r3, [pc, #464]	; (800255c <HAL_RCC_OscConfig+0x474>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a73      	ldr	r2, [pc, #460]	; (800255c <HAL_RCC_OscConfig+0x474>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002396:	f7fe fe8d 	bl	80010b4 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239e:	f7fe fe89 	bl	80010b4 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e10c      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	4b6a      	ldr	r3, [pc, #424]	; (800255c <HAL_RCC_OscConfig+0x474>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x2ea>
 80023c4:	4b64      	ldr	r3, [pc, #400]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c8:	4a63      	ldr	r2, [pc, #396]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	; 0x70
 80023d0:	e01c      	b.n	800240c <HAL_RCC_OscConfig+0x324>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b05      	cmp	r3, #5
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x30c>
 80023da:	4b5f      	ldr	r3, [pc, #380]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	4a5e      	ldr	r2, [pc, #376]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6713      	str	r3, [r2, #112]	; 0x70
 80023e6:	4b5c      	ldr	r3, [pc, #368]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	4a5b      	ldr	r2, [pc, #364]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6713      	str	r3, [r2, #112]	; 0x70
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0x324>
 80023f4:	4b58      	ldr	r3, [pc, #352]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	4a57      	ldr	r2, [pc, #348]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80023fa:	f023 0301 	bic.w	r3, r3, #1
 80023fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002400:	4b55      	ldr	r3, [pc, #340]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	4a54      	ldr	r2, [pc, #336]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002406:	f023 0304 	bic.w	r3, r3, #4
 800240a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d015      	beq.n	8002440 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe fe4e 	bl	80010b4 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241a:	e00a      	b.n	8002432 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800241c:	f7fe fe4a 	bl	80010b4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0cb      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	4b49      	ldr	r3, [pc, #292]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0ee      	beq.n	800241c <HAL_RCC_OscConfig+0x334>
 800243e:	e014      	b.n	800246a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002440:	f7fe fe38 	bl	80010b4 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002446:	e00a      	b.n	800245e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002448:	f7fe fe34 	bl	80010b4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e0b5      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245e:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1ee      	bne.n	8002448 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800246a:	7dfb      	ldrb	r3, [r7, #23]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d105      	bne.n	800247c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002470:	4b39      	ldr	r3, [pc, #228]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	4a38      	ldr	r2, [pc, #224]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800247a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80a1 	beq.w	80025c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002486:	4b34      	ldr	r3, [pc, #208]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b08      	cmp	r3, #8
 8002490:	d05c      	beq.n	800254c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d141      	bne.n	800251e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	4b31      	ldr	r3, [pc, #196]	; (8002560 <HAL_RCC_OscConfig+0x478>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7fe fe08 	bl	80010b4 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024a8:	f7fe fe04 	bl	80010b4 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e087      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ba:	4b27      	ldr	r3, [pc, #156]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69da      	ldr	r2, [r3, #28]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	019b      	lsls	r3, r3, #6
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	085b      	lsrs	r3, r3, #1
 80024de:	3b01      	subs	r3, #1
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e8:	061b      	lsls	r3, r3, #24
 80024ea:	491b      	ldr	r1, [pc, #108]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <HAL_RCC_OscConfig+0x478>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe fddd 	bl	80010b4 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024fe:	f7fe fdd9 	bl	80010b4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e05c      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x416>
 800251c:	e054      	b.n	80025c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251e:	4b10      	ldr	r3, [pc, #64]	; (8002560 <HAL_RCC_OscConfig+0x478>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002524:	f7fe fdc6 	bl	80010b4 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252c:	f7fe fdc2 	bl	80010b4 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e045      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_RCC_OscConfig+0x470>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x444>
 800254a:	e03d      	b.n	80025c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d107      	bne.n	8002564 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e038      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
 8002558:	40023800 	.word	0x40023800
 800255c:	40007000 	.word	0x40007000
 8002560:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_RCC_OscConfig+0x4ec>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d028      	beq.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257c:	429a      	cmp	r2, r3
 800257e:	d121      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	429a      	cmp	r2, r3
 800258c:	d11a      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002594:	4013      	ands	r3, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800259a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800259c:	4293      	cmp	r3, r2
 800259e:	d111      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	3b01      	subs	r3, #1
 80025ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d107      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800

080025d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e0cc      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	4b68      	ldr	r3, [pc, #416]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d90c      	bls.n	8002614 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b65      	ldr	r3, [pc, #404]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b63      	ldr	r3, [pc, #396]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e0b8      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d020      	beq.n	8002662 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800262c:	4b59      	ldr	r3, [pc, #356]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4a58      	ldr	r2, [pc, #352]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002636:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002644:	4b53      	ldr	r3, [pc, #332]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a52      	ldr	r2, [pc, #328]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800264e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002650:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	494d      	ldr	r1, [pc, #308]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	4313      	orrs	r3, r2
 8002660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d044      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d107      	bne.n	8002686 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d119      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e07f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d003      	beq.n	8002696 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002692:	2b03      	cmp	r3, #3
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4b3f      	ldr	r3, [pc, #252]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d109      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e06f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a6:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e067      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b6:	4b37      	ldr	r3, [pc, #220]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f023 0203 	bic.w	r2, r3, #3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4934      	ldr	r1, [pc, #208]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c8:	f7fe fcf4 	bl	80010b4 <HAL_GetTick>
 80026cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d0:	f7fe fcf0 	bl	80010b4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	; 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e04f      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f003 020c 	and.w	r2, r3, #12
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d1eb      	bne.n	80026d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d20c      	bcs.n	8002720 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b22      	ldr	r3, [pc, #136]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b20      	ldr	r3, [pc, #128]	; (8002790 <HAL_RCC_ClockConfig+0x1b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e032      	b.n	8002786 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4916      	ldr	r1, [pc, #88]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	4313      	orrs	r3, r2
 800273c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800274a:	4b12      	ldr	r3, [pc, #72]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	490e      	ldr	r1, [pc, #56]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800275e:	f000 f821 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002762:	4602      	mov	r2, r0
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_ClockConfig+0x1bc>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	490a      	ldr	r1, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	5ccb      	ldrb	r3, [r1, r3]
 8002772:	fa22 f303 	lsr.w	r3, r2, r3
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <HAL_RCC_ClockConfig+0x1c4>)
 8002778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_ClockConfig+0x1c8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fc54 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40023c00 	.word	0x40023c00
 8002794:	40023800 	.word	0x40023800
 8002798:	08004240 	.word	0x08004240
 800279c:	20000000 	.word	0x20000000
 80027a0:	20000004 	.word	0x20000004

080027a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a8:	b090      	sub	sp, #64	; 0x40
 80027aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
 80027b0:	2300      	movs	r3, #0
 80027b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027b4:	2300      	movs	r3, #0
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027bc:	4b59      	ldr	r3, [pc, #356]	; (8002924 <HAL_RCC_GetSysClockFreq+0x180>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d00d      	beq.n	80027e4 <HAL_RCC_GetSysClockFreq+0x40>
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	f200 80a1 	bhi.w	8002910 <HAL_RCC_GetSysClockFreq+0x16c>
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_RCC_GetSysClockFreq+0x34>
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d003      	beq.n	80027de <HAL_RCC_GetSysClockFreq+0x3a>
 80027d6:	e09b      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4b53      	ldr	r3, [pc, #332]	; (8002928 <HAL_RCC_GetSysClockFreq+0x184>)
 80027da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80027dc:	e09b      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027de:	4b53      	ldr	r3, [pc, #332]	; (800292c <HAL_RCC_GetSysClockFreq+0x188>)
 80027e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027e2:	e098      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027e4:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <HAL_RCC_GetSysClockFreq+0x180>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ee:	4b4d      	ldr	r3, [pc, #308]	; (8002924 <HAL_RCC_GetSysClockFreq+0x180>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d028      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fa:	4b4a      	ldr	r3, [pc, #296]	; (8002924 <HAL_RCC_GetSysClockFreq+0x180>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	099b      	lsrs	r3, r3, #6
 8002800:	2200      	movs	r2, #0
 8002802:	623b      	str	r3, [r7, #32]
 8002804:	627a      	str	r2, [r7, #36]	; 0x24
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800280c:	2100      	movs	r1, #0
 800280e:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_RCC_GetSysClockFreq+0x188>)
 8002810:	fb03 f201 	mul.w	r2, r3, r1
 8002814:	2300      	movs	r3, #0
 8002816:	fb00 f303 	mul.w	r3, r0, r3
 800281a:	4413      	add	r3, r2
 800281c:	4a43      	ldr	r2, [pc, #268]	; (800292c <HAL_RCC_GetSysClockFreq+0x188>)
 800281e:	fba0 1202 	umull	r1, r2, r0, r2
 8002822:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002824:	460a      	mov	r2, r1
 8002826:	62ba      	str	r2, [r7, #40]	; 0x28
 8002828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800282a:	4413      	add	r3, r2
 800282c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002830:	2200      	movs	r2, #0
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	61fa      	str	r2, [r7, #28]
 8002836:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800283a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800283e:	f7fd fd1f 	bl	8000280 <__aeabi_uldivmod>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4613      	mov	r3, r2
 8002848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800284a:	e053      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284c:	4b35      	ldr	r3, [pc, #212]	; (8002924 <HAL_RCC_GetSysClockFreq+0x180>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	099b      	lsrs	r3, r3, #6
 8002852:	2200      	movs	r2, #0
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	617a      	str	r2, [r7, #20]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800285e:	f04f 0b00 	mov.w	fp, #0
 8002862:	4652      	mov	r2, sl
 8002864:	465b      	mov	r3, fp
 8002866:	f04f 0000 	mov.w	r0, #0
 800286a:	f04f 0100 	mov.w	r1, #0
 800286e:	0159      	lsls	r1, r3, #5
 8002870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002874:	0150      	lsls	r0, r2, #5
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	ebb2 080a 	subs.w	r8, r2, sl
 800287e:	eb63 090b 	sbc.w	r9, r3, fp
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800288e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002892:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002896:	ebb2 0408 	subs.w	r4, r2, r8
 800289a:	eb63 0509 	sbc.w	r5, r3, r9
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	00eb      	lsls	r3, r5, #3
 80028a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ac:	00e2      	lsls	r2, r4, #3
 80028ae:	4614      	mov	r4, r2
 80028b0:	461d      	mov	r5, r3
 80028b2:	eb14 030a 	adds.w	r3, r4, sl
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	eb45 030b 	adc.w	r3, r5, fp
 80028bc:	607b      	str	r3, [r7, #4]
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ca:	4629      	mov	r1, r5
 80028cc:	028b      	lsls	r3, r1, #10
 80028ce:	4621      	mov	r1, r4
 80028d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028d4:	4621      	mov	r1, r4
 80028d6:	028a      	lsls	r2, r1, #10
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028de:	2200      	movs	r2, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	60fa      	str	r2, [r7, #12]
 80028e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028e8:	f7fd fcca 	bl	8000280 <__aeabi_uldivmod>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4613      	mov	r3, r2
 80028f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_GetSysClockFreq+0x180>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	3301      	adds	r3, #1
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002904:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002908:	fbb2 f3f3 	udiv	r3, r2, r3
 800290c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800290e:	e002      	b.n	8002916 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_RCC_GetSysClockFreq+0x184>)
 8002912:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002918:	4618      	mov	r0, r3
 800291a:	3740      	adds	r7, #64	; 0x40
 800291c:	46bd      	mov	sp, r7
 800291e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	00f42400 	.word	0x00f42400
 800292c:	017d7840 	.word	0x017d7840

08002930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_RCC_GetHCLKFreq+0x14>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000000 	.word	0x20000000

08002948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800294c:	f7ff fff0 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002950:	4602      	mov	r2, r0
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	0a9b      	lsrs	r3, r3, #10
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	4903      	ldr	r1, [pc, #12]	; (800296c <HAL_RCC_GetPCLK1Freq+0x24>)
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40023800 	.word	0x40023800
 800296c:	08004250 	.word	0x08004250

08002970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002974:	f7ff ffdc 	bl	8002930 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	0b5b      	lsrs	r3, r3, #13
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4903      	ldr	r1, [pc, #12]	; (8002994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800298c:	4618      	mov	r0, r3
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40023800 	.word	0x40023800
 8002994:	08004250 	.word	0x08004250

08002998 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e03f      	b.n	8002a2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe f9c0 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	; 0x24
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f929 	bl	8002c34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b08a      	sub	sp, #40	; 0x28
 8002a36:	af02      	add	r7, sp, #8
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b20      	cmp	r3, #32
 8002a50:	d17c      	bne.n	8002b4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d002      	beq.n	8002a5e <HAL_UART_Transmit+0x2c>
 8002a58:	88fb      	ldrh	r3, [r7, #6]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e075      	b.n	8002b4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_UART_Transmit+0x3e>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e06e      	b.n	8002b4e <HAL_UART_Transmit+0x11c>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2221      	movs	r2, #33	; 0x21
 8002a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a86:	f7fe fb15 	bl	80010b4 <HAL_GetTick>
 8002a8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	88fa      	ldrh	r2, [r7, #6]
 8002a90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	88fa      	ldrh	r2, [r7, #6]
 8002a96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa0:	d108      	bne.n	8002ab4 <HAL_UART_Transmit+0x82>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d104      	bne.n	8002ab4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	e003      	b.n	8002abc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ac4:	e02a      	b.n	8002b1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2200      	movs	r2, #0
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 f840 	bl	8002b56 <UART_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e036      	b.n	8002b4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	3302      	adds	r3, #2
 8002afa:	61bb      	str	r3, [r7, #24]
 8002afc:	e007      	b.n	8002b0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	781a      	ldrb	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1cf      	bne.n	8002ac6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2140      	movs	r1, #64	; 0x40
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f810 	bl	8002b56 <UART_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e006      	b.n	8002b4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b090      	sub	sp, #64	; 0x40
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	4613      	mov	r3, r2
 8002b64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b66:	e050      	b.n	8002c0a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6e:	d04c      	beq.n	8002c0a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d007      	beq.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b76:	f7fe fa9d 	bl	80010b4 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d241      	bcs.n	8002c0a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	330c      	adds	r3, #12
 8002ba4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ba6:	637a      	str	r2, [r7, #52]	; 0x34
 8002ba8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e5      	bne.n	8002b86 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	3314      	adds	r3, #20
 8002bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	e853 3f00 	ldrex	r3, [r3]
 8002bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	3314      	adds	r3, #20
 8002bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bda:	623a      	str	r2, [r7, #32]
 8002bdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bde:	69f9      	ldr	r1, [r7, #28]
 8002be0:	6a3a      	ldr	r2, [r7, #32]
 8002be2:	e841 2300 	strex	r3, r2, [r1]
 8002be6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1e5      	bne.n	8002bba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e00f      	b.n	8002c2a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4013      	ands	r3, r2
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	bf0c      	ite	eq
 8002c1a:	2301      	moveq	r3, #1
 8002c1c:	2300      	movne	r3, #0
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d09f      	beq.n	8002b68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3740      	adds	r7, #64	; 0x40
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c38:	b0c0      	sub	sp, #256	; 0x100
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c50:	68d9      	ldr	r1, [r3, #12]
 8002c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	ea40 0301 	orr.w	r3, r0, r1
 8002c5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c8c:	f021 010c 	bic.w	r1, r1, #12
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c9a:	430b      	orrs	r3, r1
 8002c9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cae:	6999      	ldr	r1, [r3, #24]
 8002cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	ea40 0301 	orr.w	r3, r0, r1
 8002cba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4b8f      	ldr	r3, [pc, #572]	; (8002f00 <UART_SetConfig+0x2cc>)
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d005      	beq.n	8002cd4 <UART_SetConfig+0xa0>
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b8d      	ldr	r3, [pc, #564]	; (8002f04 <UART_SetConfig+0x2d0>)
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d104      	bne.n	8002cde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cd4:	f7ff fe4c 	bl	8002970 <HAL_RCC_GetPCLK2Freq>
 8002cd8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cdc:	e003      	b.n	8002ce6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cde:	f7ff fe33 	bl	8002948 <HAL_RCC_GetPCLK1Freq>
 8002ce2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf0:	f040 810c 	bne.w	8002f0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cfe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d06:	4622      	mov	r2, r4
 8002d08:	462b      	mov	r3, r5
 8002d0a:	1891      	adds	r1, r2, r2
 8002d0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d0e:	415b      	adcs	r3, r3
 8002d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d16:	4621      	mov	r1, r4
 8002d18:	eb12 0801 	adds.w	r8, r2, r1
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	eb43 0901 	adc.w	r9, r3, r1
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d36:	4690      	mov	r8, r2
 8002d38:	4699      	mov	r9, r3
 8002d3a:	4623      	mov	r3, r4
 8002d3c:	eb18 0303 	adds.w	r3, r8, r3
 8002d40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d44:	462b      	mov	r3, r5
 8002d46:	eb49 0303 	adc.w	r3, r9, r3
 8002d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d62:	460b      	mov	r3, r1
 8002d64:	18db      	adds	r3, r3, r3
 8002d66:	653b      	str	r3, [r7, #80]	; 0x50
 8002d68:	4613      	mov	r3, r2
 8002d6a:	eb42 0303 	adc.w	r3, r2, r3
 8002d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d78:	f7fd fa82 	bl	8000280 <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4b61      	ldr	r3, [pc, #388]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002d82:	fba3 2302 	umull	r2, r3, r3, r2
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	011c      	lsls	r4, r3, #4
 8002d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d9c:	4642      	mov	r2, r8
 8002d9e:	464b      	mov	r3, r9
 8002da0:	1891      	adds	r1, r2, r2
 8002da2:	64b9      	str	r1, [r7, #72]	; 0x48
 8002da4:	415b      	adcs	r3, r3
 8002da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dac:	4641      	mov	r1, r8
 8002dae:	eb12 0a01 	adds.w	sl, r2, r1
 8002db2:	4649      	mov	r1, r9
 8002db4:	eb43 0b01 	adc.w	fp, r3, r1
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dcc:	4692      	mov	sl, r2
 8002dce:	469b      	mov	fp, r3
 8002dd0:	4643      	mov	r3, r8
 8002dd2:	eb1a 0303 	adds.w	r3, sl, r3
 8002dd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dda:	464b      	mov	r3, r9
 8002ddc:	eb4b 0303 	adc.w	r3, fp, r3
 8002de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002df0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002df4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	18db      	adds	r3, r3, r3
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dfe:	4613      	mov	r3, r2
 8002e00:	eb42 0303 	adc.w	r3, r2, r3
 8002e04:	647b      	str	r3, [r7, #68]	; 0x44
 8002e06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e0e:	f7fd fa37 	bl	8000280 <__aeabi_uldivmod>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	4b3b      	ldr	r3, [pc, #236]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002e1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2264      	movs	r2, #100	; 0x64
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	1acb      	subs	r3, r1, r3
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e2e:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002e30:	fba3 2302 	umull	r2, r3, r3, r2
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e3c:	441c      	add	r4, r3
 8002e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e42:	2200      	movs	r2, #0
 8002e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e50:	4642      	mov	r2, r8
 8002e52:	464b      	mov	r3, r9
 8002e54:	1891      	adds	r1, r2, r2
 8002e56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e58:	415b      	adcs	r3, r3
 8002e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e60:	4641      	mov	r1, r8
 8002e62:	1851      	adds	r1, r2, r1
 8002e64:	6339      	str	r1, [r7, #48]	; 0x30
 8002e66:	4649      	mov	r1, r9
 8002e68:	414b      	adcs	r3, r1
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e78:	4659      	mov	r1, fp
 8002e7a:	00cb      	lsls	r3, r1, #3
 8002e7c:	4651      	mov	r1, sl
 8002e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e82:	4651      	mov	r1, sl
 8002e84:	00ca      	lsls	r2, r1, #3
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	4642      	mov	r2, r8
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e94:	464b      	mov	r3, r9
 8002e96:	460a      	mov	r2, r1
 8002e98:	eb42 0303 	adc.w	r3, r2, r3
 8002e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002eb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	18db      	adds	r3, r3, r3
 8002eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eba:	4613      	mov	r3, r2
 8002ebc:	eb42 0303 	adc.w	r3, r2, r3
 8002ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ec6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002eca:	f7fd f9d9 	bl	8000280 <__aeabi_uldivmod>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4b0d      	ldr	r3, [pc, #52]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	2164      	movs	r1, #100	; 0x64
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	3332      	adds	r3, #50	; 0x32
 8002ee6:	4a08      	ldr	r2, [pc, #32]	; (8002f08 <UART_SetConfig+0x2d4>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	f003 0207 	and.w	r2, r3, #7
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4422      	add	r2, r4
 8002efa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002efc:	e105      	b.n	800310a <UART_SetConfig+0x4d6>
 8002efe:	bf00      	nop
 8002f00:	40011000 	.word	0x40011000
 8002f04:	40011400 	.word	0x40011400
 8002f08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f10:	2200      	movs	r2, #0
 8002f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f1e:	4642      	mov	r2, r8
 8002f20:	464b      	mov	r3, r9
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	6239      	str	r1, [r7, #32]
 8002f26:	415b      	adcs	r3, r3
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f2e:	4641      	mov	r1, r8
 8002f30:	1854      	adds	r4, r2, r1
 8002f32:	4649      	mov	r1, r9
 8002f34:	eb43 0501 	adc.w	r5, r3, r1
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 0300 	mov.w	r3, #0
 8002f40:	00eb      	lsls	r3, r5, #3
 8002f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f46:	00e2      	lsls	r2, r4, #3
 8002f48:	4614      	mov	r4, r2
 8002f4a:	461d      	mov	r5, r3
 8002f4c:	4643      	mov	r3, r8
 8002f4e:	18e3      	adds	r3, r4, r3
 8002f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f54:	464b      	mov	r3, r9
 8002f56:	eb45 0303 	adc.w	r3, r5, r3
 8002f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f7a:	4629      	mov	r1, r5
 8002f7c:	008b      	lsls	r3, r1, #2
 8002f7e:	4621      	mov	r1, r4
 8002f80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f84:	4621      	mov	r1, r4
 8002f86:	008a      	lsls	r2, r1, #2
 8002f88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f8c:	f7fd f978 	bl	8000280 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4b60      	ldr	r3, [pc, #384]	; (8003118 <UART_SetConfig+0x4e4>)
 8002f96:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	011c      	lsls	r4, r3, #4
 8002f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fa8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	1891      	adds	r1, r2, r2
 8002fb6:	61b9      	str	r1, [r7, #24]
 8002fb8:	415b      	adcs	r3, r3
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	1851      	adds	r1, r2, r1
 8002fc4:	6139      	str	r1, [r7, #16]
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	414b      	adcs	r3, r1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd8:	4659      	mov	r1, fp
 8002fda:	00cb      	lsls	r3, r1, #3
 8002fdc:	4651      	mov	r1, sl
 8002fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fe2:	4651      	mov	r1, sl
 8002fe4:	00ca      	lsls	r2, r1, #3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4603      	mov	r3, r0
 8002fec:	4642      	mov	r2, r8
 8002fee:	189b      	adds	r3, r3, r2
 8002ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff4:	464b      	mov	r3, r9
 8002ff6:	460a      	mov	r2, r1
 8002ff8:	eb42 0303 	adc.w	r3, r2, r3
 8002ffc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	67bb      	str	r3, [r7, #120]	; 0x78
 800300a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003018:	4649      	mov	r1, r9
 800301a:	008b      	lsls	r3, r1, #2
 800301c:	4641      	mov	r1, r8
 800301e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003022:	4641      	mov	r1, r8
 8003024:	008a      	lsls	r2, r1, #2
 8003026:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800302a:	f7fd f929 	bl	8000280 <__aeabi_uldivmod>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4b39      	ldr	r3, [pc, #228]	; (8003118 <UART_SetConfig+0x4e4>)
 8003034:	fba3 1302 	umull	r1, r3, r3, r2
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	2164      	movs	r1, #100	; 0x64
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	3332      	adds	r3, #50	; 0x32
 8003046:	4a34      	ldr	r2, [pc, #208]	; (8003118 <UART_SetConfig+0x4e4>)
 8003048:	fba2 2303 	umull	r2, r3, r2, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003052:	441c      	add	r4, r3
 8003054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003058:	2200      	movs	r2, #0
 800305a:	673b      	str	r3, [r7, #112]	; 0x70
 800305c:	677a      	str	r2, [r7, #116]	; 0x74
 800305e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003062:	4642      	mov	r2, r8
 8003064:	464b      	mov	r3, r9
 8003066:	1891      	adds	r1, r2, r2
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	415b      	adcs	r3, r3
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003072:	4641      	mov	r1, r8
 8003074:	1851      	adds	r1, r2, r1
 8003076:	6039      	str	r1, [r7, #0]
 8003078:	4649      	mov	r1, r9
 800307a:	414b      	adcs	r3, r1
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800308a:	4659      	mov	r1, fp
 800308c:	00cb      	lsls	r3, r1, #3
 800308e:	4651      	mov	r1, sl
 8003090:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003094:	4651      	mov	r1, sl
 8003096:	00ca      	lsls	r2, r1, #3
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	4603      	mov	r3, r0
 800309e:	4642      	mov	r2, r8
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80030a4:	464b      	mov	r3, r9
 80030a6:	460a      	mov	r2, r1
 80030a8:	eb42 0303 	adc.w	r3, r2, r3
 80030ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	663b      	str	r3, [r7, #96]	; 0x60
 80030b8:	667a      	str	r2, [r7, #100]	; 0x64
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030c6:	4649      	mov	r1, r9
 80030c8:	008b      	lsls	r3, r1, #2
 80030ca:	4641      	mov	r1, r8
 80030cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d0:	4641      	mov	r1, r8
 80030d2:	008a      	lsls	r2, r1, #2
 80030d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030d8:	f7fd f8d2 	bl	8000280 <__aeabi_uldivmod>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <UART_SetConfig+0x4e4>)
 80030e2:	fba3 1302 	umull	r1, r3, r3, r2
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	2164      	movs	r1, #100	; 0x64
 80030ea:	fb01 f303 	mul.w	r3, r1, r3
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	3332      	adds	r3, #50	; 0x32
 80030f4:	4a08      	ldr	r2, [pc, #32]	; (8003118 <UART_SetConfig+0x4e4>)
 80030f6:	fba2 2303 	umull	r2, r3, r2, r3
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	f003 020f 	and.w	r2, r3, #15
 8003100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4422      	add	r2, r4
 8003108:	609a      	str	r2, [r3, #8]
}
 800310a:	bf00      	nop
 800310c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003110:	46bd      	mov	sp, r7
 8003112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003116:	bf00      	nop
 8003118:	51eb851f 	.word	0x51eb851f

0800311c <__errno>:
 800311c:	4b01      	ldr	r3, [pc, #4]	; (8003124 <__errno+0x8>)
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	2000000c 	.word	0x2000000c

08003128 <__libc_init_array>:
 8003128:	b570      	push	{r4, r5, r6, lr}
 800312a:	4d0d      	ldr	r5, [pc, #52]	; (8003160 <__libc_init_array+0x38>)
 800312c:	4c0d      	ldr	r4, [pc, #52]	; (8003164 <__libc_init_array+0x3c>)
 800312e:	1b64      	subs	r4, r4, r5
 8003130:	10a4      	asrs	r4, r4, #2
 8003132:	2600      	movs	r6, #0
 8003134:	42a6      	cmp	r6, r4
 8003136:	d109      	bne.n	800314c <__libc_init_array+0x24>
 8003138:	4d0b      	ldr	r5, [pc, #44]	; (8003168 <__libc_init_array+0x40>)
 800313a:	4c0c      	ldr	r4, [pc, #48]	; (800316c <__libc_init_array+0x44>)
 800313c:	f001 f824 	bl	8004188 <_init>
 8003140:	1b64      	subs	r4, r4, r5
 8003142:	10a4      	asrs	r4, r4, #2
 8003144:	2600      	movs	r6, #0
 8003146:	42a6      	cmp	r6, r4
 8003148:	d105      	bne.n	8003156 <__libc_init_array+0x2e>
 800314a:	bd70      	pop	{r4, r5, r6, pc}
 800314c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003150:	4798      	blx	r3
 8003152:	3601      	adds	r6, #1
 8003154:	e7ee      	b.n	8003134 <__libc_init_array+0xc>
 8003156:	f855 3b04 	ldr.w	r3, [r5], #4
 800315a:	4798      	blx	r3
 800315c:	3601      	adds	r6, #1
 800315e:	e7f2      	b.n	8003146 <__libc_init_array+0x1e>
 8003160:	080042f8 	.word	0x080042f8
 8003164:	080042f8 	.word	0x080042f8
 8003168:	080042f8 	.word	0x080042f8
 800316c:	080042fc 	.word	0x080042fc

08003170 <memset>:
 8003170:	4402      	add	r2, r0
 8003172:	4603      	mov	r3, r0
 8003174:	4293      	cmp	r3, r2
 8003176:	d100      	bne.n	800317a <memset+0xa>
 8003178:	4770      	bx	lr
 800317a:	f803 1b01 	strb.w	r1, [r3], #1
 800317e:	e7f9      	b.n	8003174 <memset+0x4>

08003180 <iprintf>:
 8003180:	b40f      	push	{r0, r1, r2, r3}
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <iprintf+0x2c>)
 8003184:	b513      	push	{r0, r1, r4, lr}
 8003186:	681c      	ldr	r4, [r3, #0]
 8003188:	b124      	cbz	r4, 8003194 <iprintf+0x14>
 800318a:	69a3      	ldr	r3, [r4, #24]
 800318c:	b913      	cbnz	r3, 8003194 <iprintf+0x14>
 800318e:	4620      	mov	r0, r4
 8003190:	f000 fa5e 	bl	8003650 <__sinit>
 8003194:	ab05      	add	r3, sp, #20
 8003196:	9a04      	ldr	r2, [sp, #16]
 8003198:	68a1      	ldr	r1, [r4, #8]
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	4620      	mov	r0, r4
 800319e:	f000 fc67 	bl	8003a70 <_vfiprintf_r>
 80031a2:	b002      	add	sp, #8
 80031a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031a8:	b004      	add	sp, #16
 80031aa:	4770      	bx	lr
 80031ac:	2000000c 	.word	0x2000000c

080031b0 <_puts_r>:
 80031b0:	b570      	push	{r4, r5, r6, lr}
 80031b2:	460e      	mov	r6, r1
 80031b4:	4605      	mov	r5, r0
 80031b6:	b118      	cbz	r0, 80031c0 <_puts_r+0x10>
 80031b8:	6983      	ldr	r3, [r0, #24]
 80031ba:	b90b      	cbnz	r3, 80031c0 <_puts_r+0x10>
 80031bc:	f000 fa48 	bl	8003650 <__sinit>
 80031c0:	69ab      	ldr	r3, [r5, #24]
 80031c2:	68ac      	ldr	r4, [r5, #8]
 80031c4:	b913      	cbnz	r3, 80031cc <_puts_r+0x1c>
 80031c6:	4628      	mov	r0, r5
 80031c8:	f000 fa42 	bl	8003650 <__sinit>
 80031cc:	4b2c      	ldr	r3, [pc, #176]	; (8003280 <_puts_r+0xd0>)
 80031ce:	429c      	cmp	r4, r3
 80031d0:	d120      	bne.n	8003214 <_puts_r+0x64>
 80031d2:	686c      	ldr	r4, [r5, #4]
 80031d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031d6:	07db      	lsls	r3, r3, #31
 80031d8:	d405      	bmi.n	80031e6 <_puts_r+0x36>
 80031da:	89a3      	ldrh	r3, [r4, #12]
 80031dc:	0598      	lsls	r0, r3, #22
 80031de:	d402      	bmi.n	80031e6 <_puts_r+0x36>
 80031e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80031e2:	f000 fad3 	bl	800378c <__retarget_lock_acquire_recursive>
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	0719      	lsls	r1, r3, #28
 80031ea:	d51d      	bpl.n	8003228 <_puts_r+0x78>
 80031ec:	6923      	ldr	r3, [r4, #16]
 80031ee:	b1db      	cbz	r3, 8003228 <_puts_r+0x78>
 80031f0:	3e01      	subs	r6, #1
 80031f2:	68a3      	ldr	r3, [r4, #8]
 80031f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80031f8:	3b01      	subs	r3, #1
 80031fa:	60a3      	str	r3, [r4, #8]
 80031fc:	bb39      	cbnz	r1, 800324e <_puts_r+0x9e>
 80031fe:	2b00      	cmp	r3, #0
 8003200:	da38      	bge.n	8003274 <_puts_r+0xc4>
 8003202:	4622      	mov	r2, r4
 8003204:	210a      	movs	r1, #10
 8003206:	4628      	mov	r0, r5
 8003208:	f000 f848 	bl	800329c <__swbuf_r>
 800320c:	3001      	adds	r0, #1
 800320e:	d011      	beq.n	8003234 <_puts_r+0x84>
 8003210:	250a      	movs	r5, #10
 8003212:	e011      	b.n	8003238 <_puts_r+0x88>
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <_puts_r+0xd4>)
 8003216:	429c      	cmp	r4, r3
 8003218:	d101      	bne.n	800321e <_puts_r+0x6e>
 800321a:	68ac      	ldr	r4, [r5, #8]
 800321c:	e7da      	b.n	80031d4 <_puts_r+0x24>
 800321e:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <_puts_r+0xd8>)
 8003220:	429c      	cmp	r4, r3
 8003222:	bf08      	it	eq
 8003224:	68ec      	ldreq	r4, [r5, #12]
 8003226:	e7d5      	b.n	80031d4 <_puts_r+0x24>
 8003228:	4621      	mov	r1, r4
 800322a:	4628      	mov	r0, r5
 800322c:	f000 f888 	bl	8003340 <__swsetup_r>
 8003230:	2800      	cmp	r0, #0
 8003232:	d0dd      	beq.n	80031f0 <_puts_r+0x40>
 8003234:	f04f 35ff 	mov.w	r5, #4294967295
 8003238:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800323a:	07da      	lsls	r2, r3, #31
 800323c:	d405      	bmi.n	800324a <_puts_r+0x9a>
 800323e:	89a3      	ldrh	r3, [r4, #12]
 8003240:	059b      	lsls	r3, r3, #22
 8003242:	d402      	bmi.n	800324a <_puts_r+0x9a>
 8003244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003246:	f000 faa2 	bl	800378e <__retarget_lock_release_recursive>
 800324a:	4628      	mov	r0, r5
 800324c:	bd70      	pop	{r4, r5, r6, pc}
 800324e:	2b00      	cmp	r3, #0
 8003250:	da04      	bge.n	800325c <_puts_r+0xac>
 8003252:	69a2      	ldr	r2, [r4, #24]
 8003254:	429a      	cmp	r2, r3
 8003256:	dc06      	bgt.n	8003266 <_puts_r+0xb6>
 8003258:	290a      	cmp	r1, #10
 800325a:	d004      	beq.n	8003266 <_puts_r+0xb6>
 800325c:	6823      	ldr	r3, [r4, #0]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	6022      	str	r2, [r4, #0]
 8003262:	7019      	strb	r1, [r3, #0]
 8003264:	e7c5      	b.n	80031f2 <_puts_r+0x42>
 8003266:	4622      	mov	r2, r4
 8003268:	4628      	mov	r0, r5
 800326a:	f000 f817 	bl	800329c <__swbuf_r>
 800326e:	3001      	adds	r0, #1
 8003270:	d1bf      	bne.n	80031f2 <_puts_r+0x42>
 8003272:	e7df      	b.n	8003234 <_puts_r+0x84>
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	250a      	movs	r5, #10
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	6022      	str	r2, [r4, #0]
 800327c:	701d      	strb	r5, [r3, #0]
 800327e:	e7db      	b.n	8003238 <_puts_r+0x88>
 8003280:	0800427c 	.word	0x0800427c
 8003284:	0800429c 	.word	0x0800429c
 8003288:	0800425c 	.word	0x0800425c

0800328c <puts>:
 800328c:	4b02      	ldr	r3, [pc, #8]	; (8003298 <puts+0xc>)
 800328e:	4601      	mov	r1, r0
 8003290:	6818      	ldr	r0, [r3, #0]
 8003292:	f7ff bf8d 	b.w	80031b0 <_puts_r>
 8003296:	bf00      	nop
 8003298:	2000000c 	.word	0x2000000c

0800329c <__swbuf_r>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	460e      	mov	r6, r1
 80032a0:	4614      	mov	r4, r2
 80032a2:	4605      	mov	r5, r0
 80032a4:	b118      	cbz	r0, 80032ae <__swbuf_r+0x12>
 80032a6:	6983      	ldr	r3, [r0, #24]
 80032a8:	b90b      	cbnz	r3, 80032ae <__swbuf_r+0x12>
 80032aa:	f000 f9d1 	bl	8003650 <__sinit>
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <__swbuf_r+0x98>)
 80032b0:	429c      	cmp	r4, r3
 80032b2:	d12b      	bne.n	800330c <__swbuf_r+0x70>
 80032b4:	686c      	ldr	r4, [r5, #4]
 80032b6:	69a3      	ldr	r3, [r4, #24]
 80032b8:	60a3      	str	r3, [r4, #8]
 80032ba:	89a3      	ldrh	r3, [r4, #12]
 80032bc:	071a      	lsls	r2, r3, #28
 80032be:	d52f      	bpl.n	8003320 <__swbuf_r+0x84>
 80032c0:	6923      	ldr	r3, [r4, #16]
 80032c2:	b36b      	cbz	r3, 8003320 <__swbuf_r+0x84>
 80032c4:	6923      	ldr	r3, [r4, #16]
 80032c6:	6820      	ldr	r0, [r4, #0]
 80032c8:	1ac0      	subs	r0, r0, r3
 80032ca:	6963      	ldr	r3, [r4, #20]
 80032cc:	b2f6      	uxtb	r6, r6
 80032ce:	4283      	cmp	r3, r0
 80032d0:	4637      	mov	r7, r6
 80032d2:	dc04      	bgt.n	80032de <__swbuf_r+0x42>
 80032d4:	4621      	mov	r1, r4
 80032d6:	4628      	mov	r0, r5
 80032d8:	f000 f926 	bl	8003528 <_fflush_r>
 80032dc:	bb30      	cbnz	r0, 800332c <__swbuf_r+0x90>
 80032de:	68a3      	ldr	r3, [r4, #8]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	60a3      	str	r3, [r4, #8]
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	1c5a      	adds	r2, r3, #1
 80032e8:	6022      	str	r2, [r4, #0]
 80032ea:	701e      	strb	r6, [r3, #0]
 80032ec:	6963      	ldr	r3, [r4, #20]
 80032ee:	3001      	adds	r0, #1
 80032f0:	4283      	cmp	r3, r0
 80032f2:	d004      	beq.n	80032fe <__swbuf_r+0x62>
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	07db      	lsls	r3, r3, #31
 80032f8:	d506      	bpl.n	8003308 <__swbuf_r+0x6c>
 80032fa:	2e0a      	cmp	r6, #10
 80032fc:	d104      	bne.n	8003308 <__swbuf_r+0x6c>
 80032fe:	4621      	mov	r1, r4
 8003300:	4628      	mov	r0, r5
 8003302:	f000 f911 	bl	8003528 <_fflush_r>
 8003306:	b988      	cbnz	r0, 800332c <__swbuf_r+0x90>
 8003308:	4638      	mov	r0, r7
 800330a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <__swbuf_r+0x9c>)
 800330e:	429c      	cmp	r4, r3
 8003310:	d101      	bne.n	8003316 <__swbuf_r+0x7a>
 8003312:	68ac      	ldr	r4, [r5, #8]
 8003314:	e7cf      	b.n	80032b6 <__swbuf_r+0x1a>
 8003316:	4b09      	ldr	r3, [pc, #36]	; (800333c <__swbuf_r+0xa0>)
 8003318:	429c      	cmp	r4, r3
 800331a:	bf08      	it	eq
 800331c:	68ec      	ldreq	r4, [r5, #12]
 800331e:	e7ca      	b.n	80032b6 <__swbuf_r+0x1a>
 8003320:	4621      	mov	r1, r4
 8003322:	4628      	mov	r0, r5
 8003324:	f000 f80c 	bl	8003340 <__swsetup_r>
 8003328:	2800      	cmp	r0, #0
 800332a:	d0cb      	beq.n	80032c4 <__swbuf_r+0x28>
 800332c:	f04f 37ff 	mov.w	r7, #4294967295
 8003330:	e7ea      	b.n	8003308 <__swbuf_r+0x6c>
 8003332:	bf00      	nop
 8003334:	0800427c 	.word	0x0800427c
 8003338:	0800429c 	.word	0x0800429c
 800333c:	0800425c 	.word	0x0800425c

08003340 <__swsetup_r>:
 8003340:	4b32      	ldr	r3, [pc, #200]	; (800340c <__swsetup_r+0xcc>)
 8003342:	b570      	push	{r4, r5, r6, lr}
 8003344:	681d      	ldr	r5, [r3, #0]
 8003346:	4606      	mov	r6, r0
 8003348:	460c      	mov	r4, r1
 800334a:	b125      	cbz	r5, 8003356 <__swsetup_r+0x16>
 800334c:	69ab      	ldr	r3, [r5, #24]
 800334e:	b913      	cbnz	r3, 8003356 <__swsetup_r+0x16>
 8003350:	4628      	mov	r0, r5
 8003352:	f000 f97d 	bl	8003650 <__sinit>
 8003356:	4b2e      	ldr	r3, [pc, #184]	; (8003410 <__swsetup_r+0xd0>)
 8003358:	429c      	cmp	r4, r3
 800335a:	d10f      	bne.n	800337c <__swsetup_r+0x3c>
 800335c:	686c      	ldr	r4, [r5, #4]
 800335e:	89a3      	ldrh	r3, [r4, #12]
 8003360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003364:	0719      	lsls	r1, r3, #28
 8003366:	d42c      	bmi.n	80033c2 <__swsetup_r+0x82>
 8003368:	06dd      	lsls	r5, r3, #27
 800336a:	d411      	bmi.n	8003390 <__swsetup_r+0x50>
 800336c:	2309      	movs	r3, #9
 800336e:	6033      	str	r3, [r6, #0]
 8003370:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003374:	81a3      	strh	r3, [r4, #12]
 8003376:	f04f 30ff 	mov.w	r0, #4294967295
 800337a:	e03e      	b.n	80033fa <__swsetup_r+0xba>
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <__swsetup_r+0xd4>)
 800337e:	429c      	cmp	r4, r3
 8003380:	d101      	bne.n	8003386 <__swsetup_r+0x46>
 8003382:	68ac      	ldr	r4, [r5, #8]
 8003384:	e7eb      	b.n	800335e <__swsetup_r+0x1e>
 8003386:	4b24      	ldr	r3, [pc, #144]	; (8003418 <__swsetup_r+0xd8>)
 8003388:	429c      	cmp	r4, r3
 800338a:	bf08      	it	eq
 800338c:	68ec      	ldreq	r4, [r5, #12]
 800338e:	e7e6      	b.n	800335e <__swsetup_r+0x1e>
 8003390:	0758      	lsls	r0, r3, #29
 8003392:	d512      	bpl.n	80033ba <__swsetup_r+0x7a>
 8003394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003396:	b141      	cbz	r1, 80033aa <__swsetup_r+0x6a>
 8003398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800339c:	4299      	cmp	r1, r3
 800339e:	d002      	beq.n	80033a6 <__swsetup_r+0x66>
 80033a0:	4630      	mov	r0, r6
 80033a2:	f000 fa5b 	bl	800385c <_free_r>
 80033a6:	2300      	movs	r3, #0
 80033a8:	6363      	str	r3, [r4, #52]	; 0x34
 80033aa:	89a3      	ldrh	r3, [r4, #12]
 80033ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033b0:	81a3      	strh	r3, [r4, #12]
 80033b2:	2300      	movs	r3, #0
 80033b4:	6063      	str	r3, [r4, #4]
 80033b6:	6923      	ldr	r3, [r4, #16]
 80033b8:	6023      	str	r3, [r4, #0]
 80033ba:	89a3      	ldrh	r3, [r4, #12]
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	81a3      	strh	r3, [r4, #12]
 80033c2:	6923      	ldr	r3, [r4, #16]
 80033c4:	b94b      	cbnz	r3, 80033da <__swsetup_r+0x9a>
 80033c6:	89a3      	ldrh	r3, [r4, #12]
 80033c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033d0:	d003      	beq.n	80033da <__swsetup_r+0x9a>
 80033d2:	4621      	mov	r1, r4
 80033d4:	4630      	mov	r0, r6
 80033d6:	f000 fa01 	bl	80037dc <__smakebuf_r>
 80033da:	89a0      	ldrh	r0, [r4, #12]
 80033dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033e0:	f010 0301 	ands.w	r3, r0, #1
 80033e4:	d00a      	beq.n	80033fc <__swsetup_r+0xbc>
 80033e6:	2300      	movs	r3, #0
 80033e8:	60a3      	str	r3, [r4, #8]
 80033ea:	6963      	ldr	r3, [r4, #20]
 80033ec:	425b      	negs	r3, r3
 80033ee:	61a3      	str	r3, [r4, #24]
 80033f0:	6923      	ldr	r3, [r4, #16]
 80033f2:	b943      	cbnz	r3, 8003406 <__swsetup_r+0xc6>
 80033f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80033f8:	d1ba      	bne.n	8003370 <__swsetup_r+0x30>
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
 80033fc:	0781      	lsls	r1, r0, #30
 80033fe:	bf58      	it	pl
 8003400:	6963      	ldrpl	r3, [r4, #20]
 8003402:	60a3      	str	r3, [r4, #8]
 8003404:	e7f4      	b.n	80033f0 <__swsetup_r+0xb0>
 8003406:	2000      	movs	r0, #0
 8003408:	e7f7      	b.n	80033fa <__swsetup_r+0xba>
 800340a:	bf00      	nop
 800340c:	2000000c 	.word	0x2000000c
 8003410:	0800427c 	.word	0x0800427c
 8003414:	0800429c 	.word	0x0800429c
 8003418:	0800425c 	.word	0x0800425c

0800341c <__sflush_r>:
 800341c:	898a      	ldrh	r2, [r1, #12]
 800341e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003422:	4605      	mov	r5, r0
 8003424:	0710      	lsls	r0, r2, #28
 8003426:	460c      	mov	r4, r1
 8003428:	d458      	bmi.n	80034dc <__sflush_r+0xc0>
 800342a:	684b      	ldr	r3, [r1, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	dc05      	bgt.n	800343c <__sflush_r+0x20>
 8003430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	dc02      	bgt.n	800343c <__sflush_r+0x20>
 8003436:	2000      	movs	r0, #0
 8003438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800343c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800343e:	2e00      	cmp	r6, #0
 8003440:	d0f9      	beq.n	8003436 <__sflush_r+0x1a>
 8003442:	2300      	movs	r3, #0
 8003444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003448:	682f      	ldr	r7, [r5, #0]
 800344a:	602b      	str	r3, [r5, #0]
 800344c:	d032      	beq.n	80034b4 <__sflush_r+0x98>
 800344e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003450:	89a3      	ldrh	r3, [r4, #12]
 8003452:	075a      	lsls	r2, r3, #29
 8003454:	d505      	bpl.n	8003462 <__sflush_r+0x46>
 8003456:	6863      	ldr	r3, [r4, #4]
 8003458:	1ac0      	subs	r0, r0, r3
 800345a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800345c:	b10b      	cbz	r3, 8003462 <__sflush_r+0x46>
 800345e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003460:	1ac0      	subs	r0, r0, r3
 8003462:	2300      	movs	r3, #0
 8003464:	4602      	mov	r2, r0
 8003466:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003468:	6a21      	ldr	r1, [r4, #32]
 800346a:	4628      	mov	r0, r5
 800346c:	47b0      	blx	r6
 800346e:	1c43      	adds	r3, r0, #1
 8003470:	89a3      	ldrh	r3, [r4, #12]
 8003472:	d106      	bne.n	8003482 <__sflush_r+0x66>
 8003474:	6829      	ldr	r1, [r5, #0]
 8003476:	291d      	cmp	r1, #29
 8003478:	d82c      	bhi.n	80034d4 <__sflush_r+0xb8>
 800347a:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <__sflush_r+0x108>)
 800347c:	40ca      	lsrs	r2, r1
 800347e:	07d6      	lsls	r6, r2, #31
 8003480:	d528      	bpl.n	80034d4 <__sflush_r+0xb8>
 8003482:	2200      	movs	r2, #0
 8003484:	6062      	str	r2, [r4, #4]
 8003486:	04d9      	lsls	r1, r3, #19
 8003488:	6922      	ldr	r2, [r4, #16]
 800348a:	6022      	str	r2, [r4, #0]
 800348c:	d504      	bpl.n	8003498 <__sflush_r+0x7c>
 800348e:	1c42      	adds	r2, r0, #1
 8003490:	d101      	bne.n	8003496 <__sflush_r+0x7a>
 8003492:	682b      	ldr	r3, [r5, #0]
 8003494:	b903      	cbnz	r3, 8003498 <__sflush_r+0x7c>
 8003496:	6560      	str	r0, [r4, #84]	; 0x54
 8003498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800349a:	602f      	str	r7, [r5, #0]
 800349c:	2900      	cmp	r1, #0
 800349e:	d0ca      	beq.n	8003436 <__sflush_r+0x1a>
 80034a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034a4:	4299      	cmp	r1, r3
 80034a6:	d002      	beq.n	80034ae <__sflush_r+0x92>
 80034a8:	4628      	mov	r0, r5
 80034aa:	f000 f9d7 	bl	800385c <_free_r>
 80034ae:	2000      	movs	r0, #0
 80034b0:	6360      	str	r0, [r4, #52]	; 0x34
 80034b2:	e7c1      	b.n	8003438 <__sflush_r+0x1c>
 80034b4:	6a21      	ldr	r1, [r4, #32]
 80034b6:	2301      	movs	r3, #1
 80034b8:	4628      	mov	r0, r5
 80034ba:	47b0      	blx	r6
 80034bc:	1c41      	adds	r1, r0, #1
 80034be:	d1c7      	bne.n	8003450 <__sflush_r+0x34>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0c4      	beq.n	8003450 <__sflush_r+0x34>
 80034c6:	2b1d      	cmp	r3, #29
 80034c8:	d001      	beq.n	80034ce <__sflush_r+0xb2>
 80034ca:	2b16      	cmp	r3, #22
 80034cc:	d101      	bne.n	80034d2 <__sflush_r+0xb6>
 80034ce:	602f      	str	r7, [r5, #0]
 80034d0:	e7b1      	b.n	8003436 <__sflush_r+0x1a>
 80034d2:	89a3      	ldrh	r3, [r4, #12]
 80034d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034d8:	81a3      	strh	r3, [r4, #12]
 80034da:	e7ad      	b.n	8003438 <__sflush_r+0x1c>
 80034dc:	690f      	ldr	r7, [r1, #16]
 80034de:	2f00      	cmp	r7, #0
 80034e0:	d0a9      	beq.n	8003436 <__sflush_r+0x1a>
 80034e2:	0793      	lsls	r3, r2, #30
 80034e4:	680e      	ldr	r6, [r1, #0]
 80034e6:	bf08      	it	eq
 80034e8:	694b      	ldreq	r3, [r1, #20]
 80034ea:	600f      	str	r7, [r1, #0]
 80034ec:	bf18      	it	ne
 80034ee:	2300      	movne	r3, #0
 80034f0:	eba6 0807 	sub.w	r8, r6, r7
 80034f4:	608b      	str	r3, [r1, #8]
 80034f6:	f1b8 0f00 	cmp.w	r8, #0
 80034fa:	dd9c      	ble.n	8003436 <__sflush_r+0x1a>
 80034fc:	6a21      	ldr	r1, [r4, #32]
 80034fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003500:	4643      	mov	r3, r8
 8003502:	463a      	mov	r2, r7
 8003504:	4628      	mov	r0, r5
 8003506:	47b0      	blx	r6
 8003508:	2800      	cmp	r0, #0
 800350a:	dc06      	bgt.n	800351a <__sflush_r+0xfe>
 800350c:	89a3      	ldrh	r3, [r4, #12]
 800350e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003512:	81a3      	strh	r3, [r4, #12]
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	e78e      	b.n	8003438 <__sflush_r+0x1c>
 800351a:	4407      	add	r7, r0
 800351c:	eba8 0800 	sub.w	r8, r8, r0
 8003520:	e7e9      	b.n	80034f6 <__sflush_r+0xda>
 8003522:	bf00      	nop
 8003524:	20400001 	.word	0x20400001

08003528 <_fflush_r>:
 8003528:	b538      	push	{r3, r4, r5, lr}
 800352a:	690b      	ldr	r3, [r1, #16]
 800352c:	4605      	mov	r5, r0
 800352e:	460c      	mov	r4, r1
 8003530:	b913      	cbnz	r3, 8003538 <_fflush_r+0x10>
 8003532:	2500      	movs	r5, #0
 8003534:	4628      	mov	r0, r5
 8003536:	bd38      	pop	{r3, r4, r5, pc}
 8003538:	b118      	cbz	r0, 8003542 <_fflush_r+0x1a>
 800353a:	6983      	ldr	r3, [r0, #24]
 800353c:	b90b      	cbnz	r3, 8003542 <_fflush_r+0x1a>
 800353e:	f000 f887 	bl	8003650 <__sinit>
 8003542:	4b14      	ldr	r3, [pc, #80]	; (8003594 <_fflush_r+0x6c>)
 8003544:	429c      	cmp	r4, r3
 8003546:	d11b      	bne.n	8003580 <_fflush_r+0x58>
 8003548:	686c      	ldr	r4, [r5, #4]
 800354a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0ef      	beq.n	8003532 <_fflush_r+0xa>
 8003552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003554:	07d0      	lsls	r0, r2, #31
 8003556:	d404      	bmi.n	8003562 <_fflush_r+0x3a>
 8003558:	0599      	lsls	r1, r3, #22
 800355a:	d402      	bmi.n	8003562 <_fflush_r+0x3a>
 800355c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800355e:	f000 f915 	bl	800378c <__retarget_lock_acquire_recursive>
 8003562:	4628      	mov	r0, r5
 8003564:	4621      	mov	r1, r4
 8003566:	f7ff ff59 	bl	800341c <__sflush_r>
 800356a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800356c:	07da      	lsls	r2, r3, #31
 800356e:	4605      	mov	r5, r0
 8003570:	d4e0      	bmi.n	8003534 <_fflush_r+0xc>
 8003572:	89a3      	ldrh	r3, [r4, #12]
 8003574:	059b      	lsls	r3, r3, #22
 8003576:	d4dd      	bmi.n	8003534 <_fflush_r+0xc>
 8003578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800357a:	f000 f908 	bl	800378e <__retarget_lock_release_recursive>
 800357e:	e7d9      	b.n	8003534 <_fflush_r+0xc>
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <_fflush_r+0x70>)
 8003582:	429c      	cmp	r4, r3
 8003584:	d101      	bne.n	800358a <_fflush_r+0x62>
 8003586:	68ac      	ldr	r4, [r5, #8]
 8003588:	e7df      	b.n	800354a <_fflush_r+0x22>
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <_fflush_r+0x74>)
 800358c:	429c      	cmp	r4, r3
 800358e:	bf08      	it	eq
 8003590:	68ec      	ldreq	r4, [r5, #12]
 8003592:	e7da      	b.n	800354a <_fflush_r+0x22>
 8003594:	0800427c 	.word	0x0800427c
 8003598:	0800429c 	.word	0x0800429c
 800359c:	0800425c 	.word	0x0800425c

080035a0 <std>:
 80035a0:	2300      	movs	r3, #0
 80035a2:	b510      	push	{r4, lr}
 80035a4:	4604      	mov	r4, r0
 80035a6:	e9c0 3300 	strd	r3, r3, [r0]
 80035aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035ae:	6083      	str	r3, [r0, #8]
 80035b0:	8181      	strh	r1, [r0, #12]
 80035b2:	6643      	str	r3, [r0, #100]	; 0x64
 80035b4:	81c2      	strh	r2, [r0, #14]
 80035b6:	6183      	str	r3, [r0, #24]
 80035b8:	4619      	mov	r1, r3
 80035ba:	2208      	movs	r2, #8
 80035bc:	305c      	adds	r0, #92	; 0x5c
 80035be:	f7ff fdd7 	bl	8003170 <memset>
 80035c2:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <std+0x38>)
 80035c4:	6263      	str	r3, [r4, #36]	; 0x24
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <std+0x3c>)
 80035c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80035ca:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <std+0x40>)
 80035cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <std+0x44>)
 80035d0:	6224      	str	r4, [r4, #32]
 80035d2:	6323      	str	r3, [r4, #48]	; 0x30
 80035d4:	bd10      	pop	{r4, pc}
 80035d6:	bf00      	nop
 80035d8:	08004019 	.word	0x08004019
 80035dc:	0800403b 	.word	0x0800403b
 80035e0:	08004073 	.word	0x08004073
 80035e4:	08004097 	.word	0x08004097

080035e8 <_cleanup_r>:
 80035e8:	4901      	ldr	r1, [pc, #4]	; (80035f0 <_cleanup_r+0x8>)
 80035ea:	f000 b8af 	b.w	800374c <_fwalk_reent>
 80035ee:	bf00      	nop
 80035f0:	08003529 	.word	0x08003529

080035f4 <__sfmoreglue>:
 80035f4:	b570      	push	{r4, r5, r6, lr}
 80035f6:	2268      	movs	r2, #104	; 0x68
 80035f8:	1e4d      	subs	r5, r1, #1
 80035fa:	4355      	muls	r5, r2
 80035fc:	460e      	mov	r6, r1
 80035fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003602:	f000 f997 	bl	8003934 <_malloc_r>
 8003606:	4604      	mov	r4, r0
 8003608:	b140      	cbz	r0, 800361c <__sfmoreglue+0x28>
 800360a:	2100      	movs	r1, #0
 800360c:	e9c0 1600 	strd	r1, r6, [r0]
 8003610:	300c      	adds	r0, #12
 8003612:	60a0      	str	r0, [r4, #8]
 8003614:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003618:	f7ff fdaa 	bl	8003170 <memset>
 800361c:	4620      	mov	r0, r4
 800361e:	bd70      	pop	{r4, r5, r6, pc}

08003620 <__sfp_lock_acquire>:
 8003620:	4801      	ldr	r0, [pc, #4]	; (8003628 <__sfp_lock_acquire+0x8>)
 8003622:	f000 b8b3 	b.w	800378c <__retarget_lock_acquire_recursive>
 8003626:	bf00      	nop
 8003628:	20000531 	.word	0x20000531

0800362c <__sfp_lock_release>:
 800362c:	4801      	ldr	r0, [pc, #4]	; (8003634 <__sfp_lock_release+0x8>)
 800362e:	f000 b8ae 	b.w	800378e <__retarget_lock_release_recursive>
 8003632:	bf00      	nop
 8003634:	20000531 	.word	0x20000531

08003638 <__sinit_lock_acquire>:
 8003638:	4801      	ldr	r0, [pc, #4]	; (8003640 <__sinit_lock_acquire+0x8>)
 800363a:	f000 b8a7 	b.w	800378c <__retarget_lock_acquire_recursive>
 800363e:	bf00      	nop
 8003640:	20000532 	.word	0x20000532

08003644 <__sinit_lock_release>:
 8003644:	4801      	ldr	r0, [pc, #4]	; (800364c <__sinit_lock_release+0x8>)
 8003646:	f000 b8a2 	b.w	800378e <__retarget_lock_release_recursive>
 800364a:	bf00      	nop
 800364c:	20000532 	.word	0x20000532

08003650 <__sinit>:
 8003650:	b510      	push	{r4, lr}
 8003652:	4604      	mov	r4, r0
 8003654:	f7ff fff0 	bl	8003638 <__sinit_lock_acquire>
 8003658:	69a3      	ldr	r3, [r4, #24]
 800365a:	b11b      	cbz	r3, 8003664 <__sinit+0x14>
 800365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003660:	f7ff bff0 	b.w	8003644 <__sinit_lock_release>
 8003664:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003668:	6523      	str	r3, [r4, #80]	; 0x50
 800366a:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <__sinit+0x68>)
 800366c:	4a13      	ldr	r2, [pc, #76]	; (80036bc <__sinit+0x6c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	62a2      	str	r2, [r4, #40]	; 0x28
 8003672:	42a3      	cmp	r3, r4
 8003674:	bf04      	itt	eq
 8003676:	2301      	moveq	r3, #1
 8003678:	61a3      	streq	r3, [r4, #24]
 800367a:	4620      	mov	r0, r4
 800367c:	f000 f820 	bl	80036c0 <__sfp>
 8003680:	6060      	str	r0, [r4, #4]
 8003682:	4620      	mov	r0, r4
 8003684:	f000 f81c 	bl	80036c0 <__sfp>
 8003688:	60a0      	str	r0, [r4, #8]
 800368a:	4620      	mov	r0, r4
 800368c:	f000 f818 	bl	80036c0 <__sfp>
 8003690:	2200      	movs	r2, #0
 8003692:	60e0      	str	r0, [r4, #12]
 8003694:	2104      	movs	r1, #4
 8003696:	6860      	ldr	r0, [r4, #4]
 8003698:	f7ff ff82 	bl	80035a0 <std>
 800369c:	68a0      	ldr	r0, [r4, #8]
 800369e:	2201      	movs	r2, #1
 80036a0:	2109      	movs	r1, #9
 80036a2:	f7ff ff7d 	bl	80035a0 <std>
 80036a6:	68e0      	ldr	r0, [r4, #12]
 80036a8:	2202      	movs	r2, #2
 80036aa:	2112      	movs	r1, #18
 80036ac:	f7ff ff78 	bl	80035a0 <std>
 80036b0:	2301      	movs	r3, #1
 80036b2:	61a3      	str	r3, [r4, #24]
 80036b4:	e7d2      	b.n	800365c <__sinit+0xc>
 80036b6:	bf00      	nop
 80036b8:	08004258 	.word	0x08004258
 80036bc:	080035e9 	.word	0x080035e9

080036c0 <__sfp>:
 80036c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c2:	4607      	mov	r7, r0
 80036c4:	f7ff ffac 	bl	8003620 <__sfp_lock_acquire>
 80036c8:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <__sfp+0x84>)
 80036ca:	681e      	ldr	r6, [r3, #0]
 80036cc:	69b3      	ldr	r3, [r6, #24]
 80036ce:	b913      	cbnz	r3, 80036d6 <__sfp+0x16>
 80036d0:	4630      	mov	r0, r6
 80036d2:	f7ff ffbd 	bl	8003650 <__sinit>
 80036d6:	3648      	adds	r6, #72	; 0x48
 80036d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80036dc:	3b01      	subs	r3, #1
 80036de:	d503      	bpl.n	80036e8 <__sfp+0x28>
 80036e0:	6833      	ldr	r3, [r6, #0]
 80036e2:	b30b      	cbz	r3, 8003728 <__sfp+0x68>
 80036e4:	6836      	ldr	r6, [r6, #0]
 80036e6:	e7f7      	b.n	80036d8 <__sfp+0x18>
 80036e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036ec:	b9d5      	cbnz	r5, 8003724 <__sfp+0x64>
 80036ee:	4b16      	ldr	r3, [pc, #88]	; (8003748 <__sfp+0x88>)
 80036f0:	60e3      	str	r3, [r4, #12]
 80036f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036f6:	6665      	str	r5, [r4, #100]	; 0x64
 80036f8:	f000 f847 	bl	800378a <__retarget_lock_init_recursive>
 80036fc:	f7ff ff96 	bl	800362c <__sfp_lock_release>
 8003700:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003704:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003708:	6025      	str	r5, [r4, #0]
 800370a:	61a5      	str	r5, [r4, #24]
 800370c:	2208      	movs	r2, #8
 800370e:	4629      	mov	r1, r5
 8003710:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003714:	f7ff fd2c 	bl	8003170 <memset>
 8003718:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800371c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003720:	4620      	mov	r0, r4
 8003722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003724:	3468      	adds	r4, #104	; 0x68
 8003726:	e7d9      	b.n	80036dc <__sfp+0x1c>
 8003728:	2104      	movs	r1, #4
 800372a:	4638      	mov	r0, r7
 800372c:	f7ff ff62 	bl	80035f4 <__sfmoreglue>
 8003730:	4604      	mov	r4, r0
 8003732:	6030      	str	r0, [r6, #0]
 8003734:	2800      	cmp	r0, #0
 8003736:	d1d5      	bne.n	80036e4 <__sfp+0x24>
 8003738:	f7ff ff78 	bl	800362c <__sfp_lock_release>
 800373c:	230c      	movs	r3, #12
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	e7ee      	b.n	8003720 <__sfp+0x60>
 8003742:	bf00      	nop
 8003744:	08004258 	.word	0x08004258
 8003748:	ffff0001 	.word	0xffff0001

0800374c <_fwalk_reent>:
 800374c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003750:	4606      	mov	r6, r0
 8003752:	4688      	mov	r8, r1
 8003754:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003758:	2700      	movs	r7, #0
 800375a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800375e:	f1b9 0901 	subs.w	r9, r9, #1
 8003762:	d505      	bpl.n	8003770 <_fwalk_reent+0x24>
 8003764:	6824      	ldr	r4, [r4, #0]
 8003766:	2c00      	cmp	r4, #0
 8003768:	d1f7      	bne.n	800375a <_fwalk_reent+0xe>
 800376a:	4638      	mov	r0, r7
 800376c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003770:	89ab      	ldrh	r3, [r5, #12]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d907      	bls.n	8003786 <_fwalk_reent+0x3a>
 8003776:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800377a:	3301      	adds	r3, #1
 800377c:	d003      	beq.n	8003786 <_fwalk_reent+0x3a>
 800377e:	4629      	mov	r1, r5
 8003780:	4630      	mov	r0, r6
 8003782:	47c0      	blx	r8
 8003784:	4307      	orrs	r7, r0
 8003786:	3568      	adds	r5, #104	; 0x68
 8003788:	e7e9      	b.n	800375e <_fwalk_reent+0x12>

0800378a <__retarget_lock_init_recursive>:
 800378a:	4770      	bx	lr

0800378c <__retarget_lock_acquire_recursive>:
 800378c:	4770      	bx	lr

0800378e <__retarget_lock_release_recursive>:
 800378e:	4770      	bx	lr

08003790 <__swhatbuf_r>:
 8003790:	b570      	push	{r4, r5, r6, lr}
 8003792:	460e      	mov	r6, r1
 8003794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003798:	2900      	cmp	r1, #0
 800379a:	b096      	sub	sp, #88	; 0x58
 800379c:	4614      	mov	r4, r2
 800379e:	461d      	mov	r5, r3
 80037a0:	da08      	bge.n	80037b4 <__swhatbuf_r+0x24>
 80037a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80037a6:	2200      	movs	r2, #0
 80037a8:	602a      	str	r2, [r5, #0]
 80037aa:	061a      	lsls	r2, r3, #24
 80037ac:	d410      	bmi.n	80037d0 <__swhatbuf_r+0x40>
 80037ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037b2:	e00e      	b.n	80037d2 <__swhatbuf_r+0x42>
 80037b4:	466a      	mov	r2, sp
 80037b6:	f000 fc95 	bl	80040e4 <_fstat_r>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	dbf1      	blt.n	80037a2 <__swhatbuf_r+0x12>
 80037be:	9a01      	ldr	r2, [sp, #4]
 80037c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80037c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80037c8:	425a      	negs	r2, r3
 80037ca:	415a      	adcs	r2, r3
 80037cc:	602a      	str	r2, [r5, #0]
 80037ce:	e7ee      	b.n	80037ae <__swhatbuf_r+0x1e>
 80037d0:	2340      	movs	r3, #64	; 0x40
 80037d2:	2000      	movs	r0, #0
 80037d4:	6023      	str	r3, [r4, #0]
 80037d6:	b016      	add	sp, #88	; 0x58
 80037d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080037dc <__smakebuf_r>:
 80037dc:	898b      	ldrh	r3, [r1, #12]
 80037de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037e0:	079d      	lsls	r5, r3, #30
 80037e2:	4606      	mov	r6, r0
 80037e4:	460c      	mov	r4, r1
 80037e6:	d507      	bpl.n	80037f8 <__smakebuf_r+0x1c>
 80037e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037ec:	6023      	str	r3, [r4, #0]
 80037ee:	6123      	str	r3, [r4, #16]
 80037f0:	2301      	movs	r3, #1
 80037f2:	6163      	str	r3, [r4, #20]
 80037f4:	b002      	add	sp, #8
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
 80037f8:	ab01      	add	r3, sp, #4
 80037fa:	466a      	mov	r2, sp
 80037fc:	f7ff ffc8 	bl	8003790 <__swhatbuf_r>
 8003800:	9900      	ldr	r1, [sp, #0]
 8003802:	4605      	mov	r5, r0
 8003804:	4630      	mov	r0, r6
 8003806:	f000 f895 	bl	8003934 <_malloc_r>
 800380a:	b948      	cbnz	r0, 8003820 <__smakebuf_r+0x44>
 800380c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003810:	059a      	lsls	r2, r3, #22
 8003812:	d4ef      	bmi.n	80037f4 <__smakebuf_r+0x18>
 8003814:	f023 0303 	bic.w	r3, r3, #3
 8003818:	f043 0302 	orr.w	r3, r3, #2
 800381c:	81a3      	strh	r3, [r4, #12]
 800381e:	e7e3      	b.n	80037e8 <__smakebuf_r+0xc>
 8003820:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <__smakebuf_r+0x7c>)
 8003822:	62b3      	str	r3, [r6, #40]	; 0x28
 8003824:	89a3      	ldrh	r3, [r4, #12]
 8003826:	6020      	str	r0, [r4, #0]
 8003828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382c:	81a3      	strh	r3, [r4, #12]
 800382e:	9b00      	ldr	r3, [sp, #0]
 8003830:	6163      	str	r3, [r4, #20]
 8003832:	9b01      	ldr	r3, [sp, #4]
 8003834:	6120      	str	r0, [r4, #16]
 8003836:	b15b      	cbz	r3, 8003850 <__smakebuf_r+0x74>
 8003838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800383c:	4630      	mov	r0, r6
 800383e:	f000 fc63 	bl	8004108 <_isatty_r>
 8003842:	b128      	cbz	r0, 8003850 <__smakebuf_r+0x74>
 8003844:	89a3      	ldrh	r3, [r4, #12]
 8003846:	f023 0303 	bic.w	r3, r3, #3
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	81a3      	strh	r3, [r4, #12]
 8003850:	89a0      	ldrh	r0, [r4, #12]
 8003852:	4305      	orrs	r5, r0
 8003854:	81a5      	strh	r5, [r4, #12]
 8003856:	e7cd      	b.n	80037f4 <__smakebuf_r+0x18>
 8003858:	080035e9 	.word	0x080035e9

0800385c <_free_r>:
 800385c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800385e:	2900      	cmp	r1, #0
 8003860:	d044      	beq.n	80038ec <_free_r+0x90>
 8003862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003866:	9001      	str	r0, [sp, #4]
 8003868:	2b00      	cmp	r3, #0
 800386a:	f1a1 0404 	sub.w	r4, r1, #4
 800386e:	bfb8      	it	lt
 8003870:	18e4      	addlt	r4, r4, r3
 8003872:	f000 fc6b 	bl	800414c <__malloc_lock>
 8003876:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <_free_r+0x94>)
 8003878:	9801      	ldr	r0, [sp, #4]
 800387a:	6813      	ldr	r3, [r2, #0]
 800387c:	b933      	cbnz	r3, 800388c <_free_r+0x30>
 800387e:	6063      	str	r3, [r4, #4]
 8003880:	6014      	str	r4, [r2, #0]
 8003882:	b003      	add	sp, #12
 8003884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003888:	f000 bc66 	b.w	8004158 <__malloc_unlock>
 800388c:	42a3      	cmp	r3, r4
 800388e:	d908      	bls.n	80038a2 <_free_r+0x46>
 8003890:	6825      	ldr	r5, [r4, #0]
 8003892:	1961      	adds	r1, r4, r5
 8003894:	428b      	cmp	r3, r1
 8003896:	bf01      	itttt	eq
 8003898:	6819      	ldreq	r1, [r3, #0]
 800389a:	685b      	ldreq	r3, [r3, #4]
 800389c:	1949      	addeq	r1, r1, r5
 800389e:	6021      	streq	r1, [r4, #0]
 80038a0:	e7ed      	b.n	800387e <_free_r+0x22>
 80038a2:	461a      	mov	r2, r3
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	b10b      	cbz	r3, 80038ac <_free_r+0x50>
 80038a8:	42a3      	cmp	r3, r4
 80038aa:	d9fa      	bls.n	80038a2 <_free_r+0x46>
 80038ac:	6811      	ldr	r1, [r2, #0]
 80038ae:	1855      	adds	r5, r2, r1
 80038b0:	42a5      	cmp	r5, r4
 80038b2:	d10b      	bne.n	80038cc <_free_r+0x70>
 80038b4:	6824      	ldr	r4, [r4, #0]
 80038b6:	4421      	add	r1, r4
 80038b8:	1854      	adds	r4, r2, r1
 80038ba:	42a3      	cmp	r3, r4
 80038bc:	6011      	str	r1, [r2, #0]
 80038be:	d1e0      	bne.n	8003882 <_free_r+0x26>
 80038c0:	681c      	ldr	r4, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	6053      	str	r3, [r2, #4]
 80038c6:	4421      	add	r1, r4
 80038c8:	6011      	str	r1, [r2, #0]
 80038ca:	e7da      	b.n	8003882 <_free_r+0x26>
 80038cc:	d902      	bls.n	80038d4 <_free_r+0x78>
 80038ce:	230c      	movs	r3, #12
 80038d0:	6003      	str	r3, [r0, #0]
 80038d2:	e7d6      	b.n	8003882 <_free_r+0x26>
 80038d4:	6825      	ldr	r5, [r4, #0]
 80038d6:	1961      	adds	r1, r4, r5
 80038d8:	428b      	cmp	r3, r1
 80038da:	bf04      	itt	eq
 80038dc:	6819      	ldreq	r1, [r3, #0]
 80038de:	685b      	ldreq	r3, [r3, #4]
 80038e0:	6063      	str	r3, [r4, #4]
 80038e2:	bf04      	itt	eq
 80038e4:	1949      	addeq	r1, r1, r5
 80038e6:	6021      	streq	r1, [r4, #0]
 80038e8:	6054      	str	r4, [r2, #4]
 80038ea:	e7ca      	b.n	8003882 <_free_r+0x26>
 80038ec:	b003      	add	sp, #12
 80038ee:	bd30      	pop	{r4, r5, pc}
 80038f0:	20000534 	.word	0x20000534

080038f4 <sbrk_aligned>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	4e0e      	ldr	r6, [pc, #56]	; (8003930 <sbrk_aligned+0x3c>)
 80038f8:	460c      	mov	r4, r1
 80038fa:	6831      	ldr	r1, [r6, #0]
 80038fc:	4605      	mov	r5, r0
 80038fe:	b911      	cbnz	r1, 8003906 <sbrk_aligned+0x12>
 8003900:	f000 fb7a 	bl	8003ff8 <_sbrk_r>
 8003904:	6030      	str	r0, [r6, #0]
 8003906:	4621      	mov	r1, r4
 8003908:	4628      	mov	r0, r5
 800390a:	f000 fb75 	bl	8003ff8 <_sbrk_r>
 800390e:	1c43      	adds	r3, r0, #1
 8003910:	d00a      	beq.n	8003928 <sbrk_aligned+0x34>
 8003912:	1cc4      	adds	r4, r0, #3
 8003914:	f024 0403 	bic.w	r4, r4, #3
 8003918:	42a0      	cmp	r0, r4
 800391a:	d007      	beq.n	800392c <sbrk_aligned+0x38>
 800391c:	1a21      	subs	r1, r4, r0
 800391e:	4628      	mov	r0, r5
 8003920:	f000 fb6a 	bl	8003ff8 <_sbrk_r>
 8003924:	3001      	adds	r0, #1
 8003926:	d101      	bne.n	800392c <sbrk_aligned+0x38>
 8003928:	f04f 34ff 	mov.w	r4, #4294967295
 800392c:	4620      	mov	r0, r4
 800392e:	bd70      	pop	{r4, r5, r6, pc}
 8003930:	20000538 	.word	0x20000538

08003934 <_malloc_r>:
 8003934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003938:	1ccd      	adds	r5, r1, #3
 800393a:	f025 0503 	bic.w	r5, r5, #3
 800393e:	3508      	adds	r5, #8
 8003940:	2d0c      	cmp	r5, #12
 8003942:	bf38      	it	cc
 8003944:	250c      	movcc	r5, #12
 8003946:	2d00      	cmp	r5, #0
 8003948:	4607      	mov	r7, r0
 800394a:	db01      	blt.n	8003950 <_malloc_r+0x1c>
 800394c:	42a9      	cmp	r1, r5
 800394e:	d905      	bls.n	800395c <_malloc_r+0x28>
 8003950:	230c      	movs	r3, #12
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	2600      	movs	r6, #0
 8003956:	4630      	mov	r0, r6
 8003958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800395c:	4e2e      	ldr	r6, [pc, #184]	; (8003a18 <_malloc_r+0xe4>)
 800395e:	f000 fbf5 	bl	800414c <__malloc_lock>
 8003962:	6833      	ldr	r3, [r6, #0]
 8003964:	461c      	mov	r4, r3
 8003966:	bb34      	cbnz	r4, 80039b6 <_malloc_r+0x82>
 8003968:	4629      	mov	r1, r5
 800396a:	4638      	mov	r0, r7
 800396c:	f7ff ffc2 	bl	80038f4 <sbrk_aligned>
 8003970:	1c43      	adds	r3, r0, #1
 8003972:	4604      	mov	r4, r0
 8003974:	d14d      	bne.n	8003a12 <_malloc_r+0xde>
 8003976:	6834      	ldr	r4, [r6, #0]
 8003978:	4626      	mov	r6, r4
 800397a:	2e00      	cmp	r6, #0
 800397c:	d140      	bne.n	8003a00 <_malloc_r+0xcc>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	4631      	mov	r1, r6
 8003982:	4638      	mov	r0, r7
 8003984:	eb04 0803 	add.w	r8, r4, r3
 8003988:	f000 fb36 	bl	8003ff8 <_sbrk_r>
 800398c:	4580      	cmp	r8, r0
 800398e:	d13a      	bne.n	8003a06 <_malloc_r+0xd2>
 8003990:	6821      	ldr	r1, [r4, #0]
 8003992:	3503      	adds	r5, #3
 8003994:	1a6d      	subs	r5, r5, r1
 8003996:	f025 0503 	bic.w	r5, r5, #3
 800399a:	3508      	adds	r5, #8
 800399c:	2d0c      	cmp	r5, #12
 800399e:	bf38      	it	cc
 80039a0:	250c      	movcc	r5, #12
 80039a2:	4629      	mov	r1, r5
 80039a4:	4638      	mov	r0, r7
 80039a6:	f7ff ffa5 	bl	80038f4 <sbrk_aligned>
 80039aa:	3001      	adds	r0, #1
 80039ac:	d02b      	beq.n	8003a06 <_malloc_r+0xd2>
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	442b      	add	r3, r5
 80039b2:	6023      	str	r3, [r4, #0]
 80039b4:	e00e      	b.n	80039d4 <_malloc_r+0xa0>
 80039b6:	6822      	ldr	r2, [r4, #0]
 80039b8:	1b52      	subs	r2, r2, r5
 80039ba:	d41e      	bmi.n	80039fa <_malloc_r+0xc6>
 80039bc:	2a0b      	cmp	r2, #11
 80039be:	d916      	bls.n	80039ee <_malloc_r+0xba>
 80039c0:	1961      	adds	r1, r4, r5
 80039c2:	42a3      	cmp	r3, r4
 80039c4:	6025      	str	r5, [r4, #0]
 80039c6:	bf18      	it	ne
 80039c8:	6059      	strne	r1, [r3, #4]
 80039ca:	6863      	ldr	r3, [r4, #4]
 80039cc:	bf08      	it	eq
 80039ce:	6031      	streq	r1, [r6, #0]
 80039d0:	5162      	str	r2, [r4, r5]
 80039d2:	604b      	str	r3, [r1, #4]
 80039d4:	4638      	mov	r0, r7
 80039d6:	f104 060b 	add.w	r6, r4, #11
 80039da:	f000 fbbd 	bl	8004158 <__malloc_unlock>
 80039de:	f026 0607 	bic.w	r6, r6, #7
 80039e2:	1d23      	adds	r3, r4, #4
 80039e4:	1af2      	subs	r2, r6, r3
 80039e6:	d0b6      	beq.n	8003956 <_malloc_r+0x22>
 80039e8:	1b9b      	subs	r3, r3, r6
 80039ea:	50a3      	str	r3, [r4, r2]
 80039ec:	e7b3      	b.n	8003956 <_malloc_r+0x22>
 80039ee:	6862      	ldr	r2, [r4, #4]
 80039f0:	42a3      	cmp	r3, r4
 80039f2:	bf0c      	ite	eq
 80039f4:	6032      	streq	r2, [r6, #0]
 80039f6:	605a      	strne	r2, [r3, #4]
 80039f8:	e7ec      	b.n	80039d4 <_malloc_r+0xa0>
 80039fa:	4623      	mov	r3, r4
 80039fc:	6864      	ldr	r4, [r4, #4]
 80039fe:	e7b2      	b.n	8003966 <_malloc_r+0x32>
 8003a00:	4634      	mov	r4, r6
 8003a02:	6876      	ldr	r6, [r6, #4]
 8003a04:	e7b9      	b.n	800397a <_malloc_r+0x46>
 8003a06:	230c      	movs	r3, #12
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	4638      	mov	r0, r7
 8003a0c:	f000 fba4 	bl	8004158 <__malloc_unlock>
 8003a10:	e7a1      	b.n	8003956 <_malloc_r+0x22>
 8003a12:	6025      	str	r5, [r4, #0]
 8003a14:	e7de      	b.n	80039d4 <_malloc_r+0xa0>
 8003a16:	bf00      	nop
 8003a18:	20000534 	.word	0x20000534

08003a1c <__sfputc_r>:
 8003a1c:	6893      	ldr	r3, [r2, #8]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	b410      	push	{r4}
 8003a24:	6093      	str	r3, [r2, #8]
 8003a26:	da08      	bge.n	8003a3a <__sfputc_r+0x1e>
 8003a28:	6994      	ldr	r4, [r2, #24]
 8003a2a:	42a3      	cmp	r3, r4
 8003a2c:	db01      	blt.n	8003a32 <__sfputc_r+0x16>
 8003a2e:	290a      	cmp	r1, #10
 8003a30:	d103      	bne.n	8003a3a <__sfputc_r+0x1e>
 8003a32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a36:	f7ff bc31 	b.w	800329c <__swbuf_r>
 8003a3a:	6813      	ldr	r3, [r2, #0]
 8003a3c:	1c58      	adds	r0, r3, #1
 8003a3e:	6010      	str	r0, [r2, #0]
 8003a40:	7019      	strb	r1, [r3, #0]
 8003a42:	4608      	mov	r0, r1
 8003a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <__sfputs_r>:
 8003a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a4c:	4606      	mov	r6, r0
 8003a4e:	460f      	mov	r7, r1
 8003a50:	4614      	mov	r4, r2
 8003a52:	18d5      	adds	r5, r2, r3
 8003a54:	42ac      	cmp	r4, r5
 8003a56:	d101      	bne.n	8003a5c <__sfputs_r+0x12>
 8003a58:	2000      	movs	r0, #0
 8003a5a:	e007      	b.n	8003a6c <__sfputs_r+0x22>
 8003a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a60:	463a      	mov	r2, r7
 8003a62:	4630      	mov	r0, r6
 8003a64:	f7ff ffda 	bl	8003a1c <__sfputc_r>
 8003a68:	1c43      	adds	r3, r0, #1
 8003a6a:	d1f3      	bne.n	8003a54 <__sfputs_r+0xa>
 8003a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a70 <_vfiprintf_r>:
 8003a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a74:	460d      	mov	r5, r1
 8003a76:	b09d      	sub	sp, #116	; 0x74
 8003a78:	4614      	mov	r4, r2
 8003a7a:	4698      	mov	r8, r3
 8003a7c:	4606      	mov	r6, r0
 8003a7e:	b118      	cbz	r0, 8003a88 <_vfiprintf_r+0x18>
 8003a80:	6983      	ldr	r3, [r0, #24]
 8003a82:	b90b      	cbnz	r3, 8003a88 <_vfiprintf_r+0x18>
 8003a84:	f7ff fde4 	bl	8003650 <__sinit>
 8003a88:	4b89      	ldr	r3, [pc, #548]	; (8003cb0 <_vfiprintf_r+0x240>)
 8003a8a:	429d      	cmp	r5, r3
 8003a8c:	d11b      	bne.n	8003ac6 <_vfiprintf_r+0x56>
 8003a8e:	6875      	ldr	r5, [r6, #4]
 8003a90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a92:	07d9      	lsls	r1, r3, #31
 8003a94:	d405      	bmi.n	8003aa2 <_vfiprintf_r+0x32>
 8003a96:	89ab      	ldrh	r3, [r5, #12]
 8003a98:	059a      	lsls	r2, r3, #22
 8003a9a:	d402      	bmi.n	8003aa2 <_vfiprintf_r+0x32>
 8003a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a9e:	f7ff fe75 	bl	800378c <__retarget_lock_acquire_recursive>
 8003aa2:	89ab      	ldrh	r3, [r5, #12]
 8003aa4:	071b      	lsls	r3, r3, #28
 8003aa6:	d501      	bpl.n	8003aac <_vfiprintf_r+0x3c>
 8003aa8:	692b      	ldr	r3, [r5, #16]
 8003aaa:	b9eb      	cbnz	r3, 8003ae8 <_vfiprintf_r+0x78>
 8003aac:	4629      	mov	r1, r5
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f7ff fc46 	bl	8003340 <__swsetup_r>
 8003ab4:	b1c0      	cbz	r0, 8003ae8 <_vfiprintf_r+0x78>
 8003ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003ab8:	07dc      	lsls	r4, r3, #31
 8003aba:	d50e      	bpl.n	8003ada <_vfiprintf_r+0x6a>
 8003abc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac0:	b01d      	add	sp, #116	; 0x74
 8003ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac6:	4b7b      	ldr	r3, [pc, #492]	; (8003cb4 <_vfiprintf_r+0x244>)
 8003ac8:	429d      	cmp	r5, r3
 8003aca:	d101      	bne.n	8003ad0 <_vfiprintf_r+0x60>
 8003acc:	68b5      	ldr	r5, [r6, #8]
 8003ace:	e7df      	b.n	8003a90 <_vfiprintf_r+0x20>
 8003ad0:	4b79      	ldr	r3, [pc, #484]	; (8003cb8 <_vfiprintf_r+0x248>)
 8003ad2:	429d      	cmp	r5, r3
 8003ad4:	bf08      	it	eq
 8003ad6:	68f5      	ldreq	r5, [r6, #12]
 8003ad8:	e7da      	b.n	8003a90 <_vfiprintf_r+0x20>
 8003ada:	89ab      	ldrh	r3, [r5, #12]
 8003adc:	0598      	lsls	r0, r3, #22
 8003ade:	d4ed      	bmi.n	8003abc <_vfiprintf_r+0x4c>
 8003ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ae2:	f7ff fe54 	bl	800378e <__retarget_lock_release_recursive>
 8003ae6:	e7e9      	b.n	8003abc <_vfiprintf_r+0x4c>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	9309      	str	r3, [sp, #36]	; 0x24
 8003aec:	2320      	movs	r3, #32
 8003aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003af6:	2330      	movs	r3, #48	; 0x30
 8003af8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003cbc <_vfiprintf_r+0x24c>
 8003afc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003b00:	f04f 0901 	mov.w	r9, #1
 8003b04:	4623      	mov	r3, r4
 8003b06:	469a      	mov	sl, r3
 8003b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b0c:	b10a      	cbz	r2, 8003b12 <_vfiprintf_r+0xa2>
 8003b0e:	2a25      	cmp	r2, #37	; 0x25
 8003b10:	d1f9      	bne.n	8003b06 <_vfiprintf_r+0x96>
 8003b12:	ebba 0b04 	subs.w	fp, sl, r4
 8003b16:	d00b      	beq.n	8003b30 <_vfiprintf_r+0xc0>
 8003b18:	465b      	mov	r3, fp
 8003b1a:	4622      	mov	r2, r4
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	4630      	mov	r0, r6
 8003b20:	f7ff ff93 	bl	8003a4a <__sfputs_r>
 8003b24:	3001      	adds	r0, #1
 8003b26:	f000 80aa 	beq.w	8003c7e <_vfiprintf_r+0x20e>
 8003b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b2c:	445a      	add	r2, fp
 8003b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8003b30:	f89a 3000 	ldrb.w	r3, [sl]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 80a2 	beq.w	8003c7e <_vfiprintf_r+0x20e>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b44:	f10a 0a01 	add.w	sl, sl, #1
 8003b48:	9304      	str	r3, [sp, #16]
 8003b4a:	9307      	str	r3, [sp, #28]
 8003b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b50:	931a      	str	r3, [sp, #104]	; 0x68
 8003b52:	4654      	mov	r4, sl
 8003b54:	2205      	movs	r2, #5
 8003b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b5a:	4858      	ldr	r0, [pc, #352]	; (8003cbc <_vfiprintf_r+0x24c>)
 8003b5c:	f7fc fb40 	bl	80001e0 <memchr>
 8003b60:	9a04      	ldr	r2, [sp, #16]
 8003b62:	b9d8      	cbnz	r0, 8003b9c <_vfiprintf_r+0x12c>
 8003b64:	06d1      	lsls	r1, r2, #27
 8003b66:	bf44      	itt	mi
 8003b68:	2320      	movmi	r3, #32
 8003b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b6e:	0713      	lsls	r3, r2, #28
 8003b70:	bf44      	itt	mi
 8003b72:	232b      	movmi	r3, #43	; 0x2b
 8003b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003b78:	f89a 3000 	ldrb.w	r3, [sl]
 8003b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8003b7e:	d015      	beq.n	8003bac <_vfiprintf_r+0x13c>
 8003b80:	9a07      	ldr	r2, [sp, #28]
 8003b82:	4654      	mov	r4, sl
 8003b84:	2000      	movs	r0, #0
 8003b86:	f04f 0c0a 	mov.w	ip, #10
 8003b8a:	4621      	mov	r1, r4
 8003b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b90:	3b30      	subs	r3, #48	; 0x30
 8003b92:	2b09      	cmp	r3, #9
 8003b94:	d94e      	bls.n	8003c34 <_vfiprintf_r+0x1c4>
 8003b96:	b1b0      	cbz	r0, 8003bc6 <_vfiprintf_r+0x156>
 8003b98:	9207      	str	r2, [sp, #28]
 8003b9a:	e014      	b.n	8003bc6 <_vfiprintf_r+0x156>
 8003b9c:	eba0 0308 	sub.w	r3, r0, r8
 8003ba0:	fa09 f303 	lsl.w	r3, r9, r3
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	9304      	str	r3, [sp, #16]
 8003ba8:	46a2      	mov	sl, r4
 8003baa:	e7d2      	b.n	8003b52 <_vfiprintf_r+0xe2>
 8003bac:	9b03      	ldr	r3, [sp, #12]
 8003bae:	1d19      	adds	r1, r3, #4
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	9103      	str	r1, [sp, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bfbb      	ittet	lt
 8003bb8:	425b      	neglt	r3, r3
 8003bba:	f042 0202 	orrlt.w	r2, r2, #2
 8003bbe:	9307      	strge	r3, [sp, #28]
 8003bc0:	9307      	strlt	r3, [sp, #28]
 8003bc2:	bfb8      	it	lt
 8003bc4:	9204      	strlt	r2, [sp, #16]
 8003bc6:	7823      	ldrb	r3, [r4, #0]
 8003bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8003bca:	d10c      	bne.n	8003be6 <_vfiprintf_r+0x176>
 8003bcc:	7863      	ldrb	r3, [r4, #1]
 8003bce:	2b2a      	cmp	r3, #42	; 0x2a
 8003bd0:	d135      	bne.n	8003c3e <_vfiprintf_r+0x1ce>
 8003bd2:	9b03      	ldr	r3, [sp, #12]
 8003bd4:	1d1a      	adds	r2, r3, #4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	9203      	str	r2, [sp, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bfb8      	it	lt
 8003bde:	f04f 33ff 	movlt.w	r3, #4294967295
 8003be2:	3402      	adds	r4, #2
 8003be4:	9305      	str	r3, [sp, #20]
 8003be6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003ccc <_vfiprintf_r+0x25c>
 8003bea:	7821      	ldrb	r1, [r4, #0]
 8003bec:	2203      	movs	r2, #3
 8003bee:	4650      	mov	r0, sl
 8003bf0:	f7fc faf6 	bl	80001e0 <memchr>
 8003bf4:	b140      	cbz	r0, 8003c08 <_vfiprintf_r+0x198>
 8003bf6:	2340      	movs	r3, #64	; 0x40
 8003bf8:	eba0 000a 	sub.w	r0, r0, sl
 8003bfc:	fa03 f000 	lsl.w	r0, r3, r0
 8003c00:	9b04      	ldr	r3, [sp, #16]
 8003c02:	4303      	orrs	r3, r0
 8003c04:	3401      	adds	r4, #1
 8003c06:	9304      	str	r3, [sp, #16]
 8003c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c0c:	482c      	ldr	r0, [pc, #176]	; (8003cc0 <_vfiprintf_r+0x250>)
 8003c0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003c12:	2206      	movs	r2, #6
 8003c14:	f7fc fae4 	bl	80001e0 <memchr>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d03f      	beq.n	8003c9c <_vfiprintf_r+0x22c>
 8003c1c:	4b29      	ldr	r3, [pc, #164]	; (8003cc4 <_vfiprintf_r+0x254>)
 8003c1e:	bb1b      	cbnz	r3, 8003c68 <_vfiprintf_r+0x1f8>
 8003c20:	9b03      	ldr	r3, [sp, #12]
 8003c22:	3307      	adds	r3, #7
 8003c24:	f023 0307 	bic.w	r3, r3, #7
 8003c28:	3308      	adds	r3, #8
 8003c2a:	9303      	str	r3, [sp, #12]
 8003c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c2e:	443b      	add	r3, r7
 8003c30:	9309      	str	r3, [sp, #36]	; 0x24
 8003c32:	e767      	b.n	8003b04 <_vfiprintf_r+0x94>
 8003c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c38:	460c      	mov	r4, r1
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	e7a5      	b.n	8003b8a <_vfiprintf_r+0x11a>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	3401      	adds	r4, #1
 8003c42:	9305      	str	r3, [sp, #20]
 8003c44:	4619      	mov	r1, r3
 8003c46:	f04f 0c0a 	mov.w	ip, #10
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c50:	3a30      	subs	r2, #48	; 0x30
 8003c52:	2a09      	cmp	r2, #9
 8003c54:	d903      	bls.n	8003c5e <_vfiprintf_r+0x1ee>
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0c5      	beq.n	8003be6 <_vfiprintf_r+0x176>
 8003c5a:	9105      	str	r1, [sp, #20]
 8003c5c:	e7c3      	b.n	8003be6 <_vfiprintf_r+0x176>
 8003c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c62:	4604      	mov	r4, r0
 8003c64:	2301      	movs	r3, #1
 8003c66:	e7f0      	b.n	8003c4a <_vfiprintf_r+0x1da>
 8003c68:	ab03      	add	r3, sp, #12
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	462a      	mov	r2, r5
 8003c6e:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <_vfiprintf_r+0x258>)
 8003c70:	a904      	add	r1, sp, #16
 8003c72:	4630      	mov	r0, r6
 8003c74:	f3af 8000 	nop.w
 8003c78:	4607      	mov	r7, r0
 8003c7a:	1c78      	adds	r0, r7, #1
 8003c7c:	d1d6      	bne.n	8003c2c <_vfiprintf_r+0x1bc>
 8003c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003c80:	07d9      	lsls	r1, r3, #31
 8003c82:	d405      	bmi.n	8003c90 <_vfiprintf_r+0x220>
 8003c84:	89ab      	ldrh	r3, [r5, #12]
 8003c86:	059a      	lsls	r2, r3, #22
 8003c88:	d402      	bmi.n	8003c90 <_vfiprintf_r+0x220>
 8003c8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c8c:	f7ff fd7f 	bl	800378e <__retarget_lock_release_recursive>
 8003c90:	89ab      	ldrh	r3, [r5, #12]
 8003c92:	065b      	lsls	r3, r3, #25
 8003c94:	f53f af12 	bmi.w	8003abc <_vfiprintf_r+0x4c>
 8003c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c9a:	e711      	b.n	8003ac0 <_vfiprintf_r+0x50>
 8003c9c:	ab03      	add	r3, sp, #12
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	462a      	mov	r2, r5
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <_vfiprintf_r+0x258>)
 8003ca4:	a904      	add	r1, sp, #16
 8003ca6:	4630      	mov	r0, r6
 8003ca8:	f000 f880 	bl	8003dac <_printf_i>
 8003cac:	e7e4      	b.n	8003c78 <_vfiprintf_r+0x208>
 8003cae:	bf00      	nop
 8003cb0:	0800427c 	.word	0x0800427c
 8003cb4:	0800429c 	.word	0x0800429c
 8003cb8:	0800425c 	.word	0x0800425c
 8003cbc:	080042bc 	.word	0x080042bc
 8003cc0:	080042c6 	.word	0x080042c6
 8003cc4:	00000000 	.word	0x00000000
 8003cc8:	08003a4b 	.word	0x08003a4b
 8003ccc:	080042c2 	.word	0x080042c2

08003cd0 <_printf_common>:
 8003cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	4616      	mov	r6, r2
 8003cd6:	4699      	mov	r9, r3
 8003cd8:	688a      	ldr	r2, [r1, #8]
 8003cda:	690b      	ldr	r3, [r1, #16]
 8003cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	bfb8      	it	lt
 8003ce4:	4613      	movlt	r3, r2
 8003ce6:	6033      	str	r3, [r6, #0]
 8003ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cec:	4607      	mov	r7, r0
 8003cee:	460c      	mov	r4, r1
 8003cf0:	b10a      	cbz	r2, 8003cf6 <_printf_common+0x26>
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	6033      	str	r3, [r6, #0]
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	0699      	lsls	r1, r3, #26
 8003cfa:	bf42      	ittt	mi
 8003cfc:	6833      	ldrmi	r3, [r6, #0]
 8003cfe:	3302      	addmi	r3, #2
 8003d00:	6033      	strmi	r3, [r6, #0]
 8003d02:	6825      	ldr	r5, [r4, #0]
 8003d04:	f015 0506 	ands.w	r5, r5, #6
 8003d08:	d106      	bne.n	8003d18 <_printf_common+0x48>
 8003d0a:	f104 0a19 	add.w	sl, r4, #25
 8003d0e:	68e3      	ldr	r3, [r4, #12]
 8003d10:	6832      	ldr	r2, [r6, #0]
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	42ab      	cmp	r3, r5
 8003d16:	dc26      	bgt.n	8003d66 <_printf_common+0x96>
 8003d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003d1c:	1e13      	subs	r3, r2, #0
 8003d1e:	6822      	ldr	r2, [r4, #0]
 8003d20:	bf18      	it	ne
 8003d22:	2301      	movne	r3, #1
 8003d24:	0692      	lsls	r2, r2, #26
 8003d26:	d42b      	bmi.n	8003d80 <_printf_common+0xb0>
 8003d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d2c:	4649      	mov	r1, r9
 8003d2e:	4638      	mov	r0, r7
 8003d30:	47c0      	blx	r8
 8003d32:	3001      	adds	r0, #1
 8003d34:	d01e      	beq.n	8003d74 <_printf_common+0xa4>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	68e5      	ldr	r5, [r4, #12]
 8003d3a:	6832      	ldr	r2, [r6, #0]
 8003d3c:	f003 0306 	and.w	r3, r3, #6
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	bf08      	it	eq
 8003d44:	1aad      	subeq	r5, r5, r2
 8003d46:	68a3      	ldr	r3, [r4, #8]
 8003d48:	6922      	ldr	r2, [r4, #16]
 8003d4a:	bf0c      	ite	eq
 8003d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d50:	2500      	movne	r5, #0
 8003d52:	4293      	cmp	r3, r2
 8003d54:	bfc4      	itt	gt
 8003d56:	1a9b      	subgt	r3, r3, r2
 8003d58:	18ed      	addgt	r5, r5, r3
 8003d5a:	2600      	movs	r6, #0
 8003d5c:	341a      	adds	r4, #26
 8003d5e:	42b5      	cmp	r5, r6
 8003d60:	d11a      	bne.n	8003d98 <_printf_common+0xc8>
 8003d62:	2000      	movs	r0, #0
 8003d64:	e008      	b.n	8003d78 <_printf_common+0xa8>
 8003d66:	2301      	movs	r3, #1
 8003d68:	4652      	mov	r2, sl
 8003d6a:	4649      	mov	r1, r9
 8003d6c:	4638      	mov	r0, r7
 8003d6e:	47c0      	blx	r8
 8003d70:	3001      	adds	r0, #1
 8003d72:	d103      	bne.n	8003d7c <_printf_common+0xac>
 8003d74:	f04f 30ff 	mov.w	r0, #4294967295
 8003d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7c:	3501      	adds	r5, #1
 8003d7e:	e7c6      	b.n	8003d0e <_printf_common+0x3e>
 8003d80:	18e1      	adds	r1, r4, r3
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	2030      	movs	r0, #48	; 0x30
 8003d86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d8a:	4422      	add	r2, r4
 8003d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d94:	3302      	adds	r3, #2
 8003d96:	e7c7      	b.n	8003d28 <_printf_common+0x58>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	4638      	mov	r0, r7
 8003da0:	47c0      	blx	r8
 8003da2:	3001      	adds	r0, #1
 8003da4:	d0e6      	beq.n	8003d74 <_printf_common+0xa4>
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7d9      	b.n	8003d5e <_printf_common+0x8e>
	...

08003dac <_printf_i>:
 8003dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003db0:	7e0f      	ldrb	r7, [r1, #24]
 8003db2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003db4:	2f78      	cmp	r7, #120	; 0x78
 8003db6:	4691      	mov	r9, r2
 8003db8:	4680      	mov	r8, r0
 8003dba:	460c      	mov	r4, r1
 8003dbc:	469a      	mov	sl, r3
 8003dbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003dc2:	d807      	bhi.n	8003dd4 <_printf_i+0x28>
 8003dc4:	2f62      	cmp	r7, #98	; 0x62
 8003dc6:	d80a      	bhi.n	8003dde <_printf_i+0x32>
 8003dc8:	2f00      	cmp	r7, #0
 8003dca:	f000 80d8 	beq.w	8003f7e <_printf_i+0x1d2>
 8003dce:	2f58      	cmp	r7, #88	; 0x58
 8003dd0:	f000 80a3 	beq.w	8003f1a <_printf_i+0x16e>
 8003dd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ddc:	e03a      	b.n	8003e54 <_printf_i+0xa8>
 8003dde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003de2:	2b15      	cmp	r3, #21
 8003de4:	d8f6      	bhi.n	8003dd4 <_printf_i+0x28>
 8003de6:	a101      	add	r1, pc, #4	; (adr r1, 8003dec <_printf_i+0x40>)
 8003de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dec:	08003e45 	.word	0x08003e45
 8003df0:	08003e59 	.word	0x08003e59
 8003df4:	08003dd5 	.word	0x08003dd5
 8003df8:	08003dd5 	.word	0x08003dd5
 8003dfc:	08003dd5 	.word	0x08003dd5
 8003e00:	08003dd5 	.word	0x08003dd5
 8003e04:	08003e59 	.word	0x08003e59
 8003e08:	08003dd5 	.word	0x08003dd5
 8003e0c:	08003dd5 	.word	0x08003dd5
 8003e10:	08003dd5 	.word	0x08003dd5
 8003e14:	08003dd5 	.word	0x08003dd5
 8003e18:	08003f65 	.word	0x08003f65
 8003e1c:	08003e89 	.word	0x08003e89
 8003e20:	08003f47 	.word	0x08003f47
 8003e24:	08003dd5 	.word	0x08003dd5
 8003e28:	08003dd5 	.word	0x08003dd5
 8003e2c:	08003f87 	.word	0x08003f87
 8003e30:	08003dd5 	.word	0x08003dd5
 8003e34:	08003e89 	.word	0x08003e89
 8003e38:	08003dd5 	.word	0x08003dd5
 8003e3c:	08003dd5 	.word	0x08003dd5
 8003e40:	08003f4f 	.word	0x08003f4f
 8003e44:	682b      	ldr	r3, [r5, #0]
 8003e46:	1d1a      	adds	r2, r3, #4
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	602a      	str	r2, [r5, #0]
 8003e4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0a3      	b.n	8003fa0 <_printf_i+0x1f4>
 8003e58:	6820      	ldr	r0, [r4, #0]
 8003e5a:	6829      	ldr	r1, [r5, #0]
 8003e5c:	0606      	lsls	r6, r0, #24
 8003e5e:	f101 0304 	add.w	r3, r1, #4
 8003e62:	d50a      	bpl.n	8003e7a <_printf_i+0xce>
 8003e64:	680e      	ldr	r6, [r1, #0]
 8003e66:	602b      	str	r3, [r5, #0]
 8003e68:	2e00      	cmp	r6, #0
 8003e6a:	da03      	bge.n	8003e74 <_printf_i+0xc8>
 8003e6c:	232d      	movs	r3, #45	; 0x2d
 8003e6e:	4276      	negs	r6, r6
 8003e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e74:	485e      	ldr	r0, [pc, #376]	; (8003ff0 <_printf_i+0x244>)
 8003e76:	230a      	movs	r3, #10
 8003e78:	e019      	b.n	8003eae <_printf_i+0x102>
 8003e7a:	680e      	ldr	r6, [r1, #0]
 8003e7c:	602b      	str	r3, [r5, #0]
 8003e7e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e82:	bf18      	it	ne
 8003e84:	b236      	sxthne	r6, r6
 8003e86:	e7ef      	b.n	8003e68 <_printf_i+0xbc>
 8003e88:	682b      	ldr	r3, [r5, #0]
 8003e8a:	6820      	ldr	r0, [r4, #0]
 8003e8c:	1d19      	adds	r1, r3, #4
 8003e8e:	6029      	str	r1, [r5, #0]
 8003e90:	0601      	lsls	r1, r0, #24
 8003e92:	d501      	bpl.n	8003e98 <_printf_i+0xec>
 8003e94:	681e      	ldr	r6, [r3, #0]
 8003e96:	e002      	b.n	8003e9e <_printf_i+0xf2>
 8003e98:	0646      	lsls	r6, r0, #25
 8003e9a:	d5fb      	bpl.n	8003e94 <_printf_i+0xe8>
 8003e9c:	881e      	ldrh	r6, [r3, #0]
 8003e9e:	4854      	ldr	r0, [pc, #336]	; (8003ff0 <_printf_i+0x244>)
 8003ea0:	2f6f      	cmp	r7, #111	; 0x6f
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2308      	moveq	r3, #8
 8003ea6:	230a      	movne	r3, #10
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003eae:	6865      	ldr	r5, [r4, #4]
 8003eb0:	60a5      	str	r5, [r4, #8]
 8003eb2:	2d00      	cmp	r5, #0
 8003eb4:	bfa2      	ittt	ge
 8003eb6:	6821      	ldrge	r1, [r4, #0]
 8003eb8:	f021 0104 	bicge.w	r1, r1, #4
 8003ebc:	6021      	strge	r1, [r4, #0]
 8003ebe:	b90e      	cbnz	r6, 8003ec4 <_printf_i+0x118>
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	d04d      	beq.n	8003f60 <_printf_i+0x1b4>
 8003ec4:	4615      	mov	r5, r2
 8003ec6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003eca:	fb03 6711 	mls	r7, r3, r1, r6
 8003ece:	5dc7      	ldrb	r7, [r0, r7]
 8003ed0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ed4:	4637      	mov	r7, r6
 8003ed6:	42bb      	cmp	r3, r7
 8003ed8:	460e      	mov	r6, r1
 8003eda:	d9f4      	bls.n	8003ec6 <_printf_i+0x11a>
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d10b      	bne.n	8003ef8 <_printf_i+0x14c>
 8003ee0:	6823      	ldr	r3, [r4, #0]
 8003ee2:	07de      	lsls	r6, r3, #31
 8003ee4:	d508      	bpl.n	8003ef8 <_printf_i+0x14c>
 8003ee6:	6923      	ldr	r3, [r4, #16]
 8003ee8:	6861      	ldr	r1, [r4, #4]
 8003eea:	4299      	cmp	r1, r3
 8003eec:	bfde      	ittt	le
 8003eee:	2330      	movle	r3, #48	; 0x30
 8003ef0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ef4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ef8:	1b52      	subs	r2, r2, r5
 8003efa:	6122      	str	r2, [r4, #16]
 8003efc:	f8cd a000 	str.w	sl, [sp]
 8003f00:	464b      	mov	r3, r9
 8003f02:	aa03      	add	r2, sp, #12
 8003f04:	4621      	mov	r1, r4
 8003f06:	4640      	mov	r0, r8
 8003f08:	f7ff fee2 	bl	8003cd0 <_printf_common>
 8003f0c:	3001      	adds	r0, #1
 8003f0e:	d14c      	bne.n	8003faa <_printf_i+0x1fe>
 8003f10:	f04f 30ff 	mov.w	r0, #4294967295
 8003f14:	b004      	add	sp, #16
 8003f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f1a:	4835      	ldr	r0, [pc, #212]	; (8003ff0 <_printf_i+0x244>)
 8003f1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003f20:	6829      	ldr	r1, [r5, #0]
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	f851 6b04 	ldr.w	r6, [r1], #4
 8003f28:	6029      	str	r1, [r5, #0]
 8003f2a:	061d      	lsls	r5, r3, #24
 8003f2c:	d514      	bpl.n	8003f58 <_printf_i+0x1ac>
 8003f2e:	07df      	lsls	r7, r3, #31
 8003f30:	bf44      	itt	mi
 8003f32:	f043 0320 	orrmi.w	r3, r3, #32
 8003f36:	6023      	strmi	r3, [r4, #0]
 8003f38:	b91e      	cbnz	r6, 8003f42 <_printf_i+0x196>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	f023 0320 	bic.w	r3, r3, #32
 8003f40:	6023      	str	r3, [r4, #0]
 8003f42:	2310      	movs	r3, #16
 8003f44:	e7b0      	b.n	8003ea8 <_printf_i+0xfc>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	f043 0320 	orr.w	r3, r3, #32
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	2378      	movs	r3, #120	; 0x78
 8003f50:	4828      	ldr	r0, [pc, #160]	; (8003ff4 <_printf_i+0x248>)
 8003f52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f56:	e7e3      	b.n	8003f20 <_printf_i+0x174>
 8003f58:	0659      	lsls	r1, r3, #25
 8003f5a:	bf48      	it	mi
 8003f5c:	b2b6      	uxthmi	r6, r6
 8003f5e:	e7e6      	b.n	8003f2e <_printf_i+0x182>
 8003f60:	4615      	mov	r5, r2
 8003f62:	e7bb      	b.n	8003edc <_printf_i+0x130>
 8003f64:	682b      	ldr	r3, [r5, #0]
 8003f66:	6826      	ldr	r6, [r4, #0]
 8003f68:	6961      	ldr	r1, [r4, #20]
 8003f6a:	1d18      	adds	r0, r3, #4
 8003f6c:	6028      	str	r0, [r5, #0]
 8003f6e:	0635      	lsls	r5, r6, #24
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	d501      	bpl.n	8003f78 <_printf_i+0x1cc>
 8003f74:	6019      	str	r1, [r3, #0]
 8003f76:	e002      	b.n	8003f7e <_printf_i+0x1d2>
 8003f78:	0670      	lsls	r0, r6, #25
 8003f7a:	d5fb      	bpl.n	8003f74 <_printf_i+0x1c8>
 8003f7c:	8019      	strh	r1, [r3, #0]
 8003f7e:	2300      	movs	r3, #0
 8003f80:	6123      	str	r3, [r4, #16]
 8003f82:	4615      	mov	r5, r2
 8003f84:	e7ba      	b.n	8003efc <_printf_i+0x150>
 8003f86:	682b      	ldr	r3, [r5, #0]
 8003f88:	1d1a      	adds	r2, r3, #4
 8003f8a:	602a      	str	r2, [r5, #0]
 8003f8c:	681d      	ldr	r5, [r3, #0]
 8003f8e:	6862      	ldr	r2, [r4, #4]
 8003f90:	2100      	movs	r1, #0
 8003f92:	4628      	mov	r0, r5
 8003f94:	f7fc f924 	bl	80001e0 <memchr>
 8003f98:	b108      	cbz	r0, 8003f9e <_printf_i+0x1f2>
 8003f9a:	1b40      	subs	r0, r0, r5
 8003f9c:	6060      	str	r0, [r4, #4]
 8003f9e:	6863      	ldr	r3, [r4, #4]
 8003fa0:	6123      	str	r3, [r4, #16]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fa8:	e7a8      	b.n	8003efc <_printf_i+0x150>
 8003faa:	6923      	ldr	r3, [r4, #16]
 8003fac:	462a      	mov	r2, r5
 8003fae:	4649      	mov	r1, r9
 8003fb0:	4640      	mov	r0, r8
 8003fb2:	47d0      	blx	sl
 8003fb4:	3001      	adds	r0, #1
 8003fb6:	d0ab      	beq.n	8003f10 <_printf_i+0x164>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	079b      	lsls	r3, r3, #30
 8003fbc:	d413      	bmi.n	8003fe6 <_printf_i+0x23a>
 8003fbe:	68e0      	ldr	r0, [r4, #12]
 8003fc0:	9b03      	ldr	r3, [sp, #12]
 8003fc2:	4298      	cmp	r0, r3
 8003fc4:	bfb8      	it	lt
 8003fc6:	4618      	movlt	r0, r3
 8003fc8:	e7a4      	b.n	8003f14 <_printf_i+0x168>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	4632      	mov	r2, r6
 8003fce:	4649      	mov	r1, r9
 8003fd0:	4640      	mov	r0, r8
 8003fd2:	47d0      	blx	sl
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d09b      	beq.n	8003f10 <_printf_i+0x164>
 8003fd8:	3501      	adds	r5, #1
 8003fda:	68e3      	ldr	r3, [r4, #12]
 8003fdc:	9903      	ldr	r1, [sp, #12]
 8003fde:	1a5b      	subs	r3, r3, r1
 8003fe0:	42ab      	cmp	r3, r5
 8003fe2:	dcf2      	bgt.n	8003fca <_printf_i+0x21e>
 8003fe4:	e7eb      	b.n	8003fbe <_printf_i+0x212>
 8003fe6:	2500      	movs	r5, #0
 8003fe8:	f104 0619 	add.w	r6, r4, #25
 8003fec:	e7f5      	b.n	8003fda <_printf_i+0x22e>
 8003fee:	bf00      	nop
 8003ff0:	080042cd 	.word	0x080042cd
 8003ff4:	080042de 	.word	0x080042de

08003ff8 <_sbrk_r>:
 8003ff8:	b538      	push	{r3, r4, r5, lr}
 8003ffa:	4d06      	ldr	r5, [pc, #24]	; (8004014 <_sbrk_r+0x1c>)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	4604      	mov	r4, r0
 8004000:	4608      	mov	r0, r1
 8004002:	602b      	str	r3, [r5, #0]
 8004004:	f7fc ff7e 	bl	8000f04 <_sbrk>
 8004008:	1c43      	adds	r3, r0, #1
 800400a:	d102      	bne.n	8004012 <_sbrk_r+0x1a>
 800400c:	682b      	ldr	r3, [r5, #0]
 800400e:	b103      	cbz	r3, 8004012 <_sbrk_r+0x1a>
 8004010:	6023      	str	r3, [r4, #0]
 8004012:	bd38      	pop	{r3, r4, r5, pc}
 8004014:	2000053c 	.word	0x2000053c

08004018 <__sread>:
 8004018:	b510      	push	{r4, lr}
 800401a:	460c      	mov	r4, r1
 800401c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004020:	f000 f8a0 	bl	8004164 <_read_r>
 8004024:	2800      	cmp	r0, #0
 8004026:	bfab      	itete	ge
 8004028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800402a:	89a3      	ldrhlt	r3, [r4, #12]
 800402c:	181b      	addge	r3, r3, r0
 800402e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004032:	bfac      	ite	ge
 8004034:	6563      	strge	r3, [r4, #84]	; 0x54
 8004036:	81a3      	strhlt	r3, [r4, #12]
 8004038:	bd10      	pop	{r4, pc}

0800403a <__swrite>:
 800403a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800403e:	461f      	mov	r7, r3
 8004040:	898b      	ldrh	r3, [r1, #12]
 8004042:	05db      	lsls	r3, r3, #23
 8004044:	4605      	mov	r5, r0
 8004046:	460c      	mov	r4, r1
 8004048:	4616      	mov	r6, r2
 800404a:	d505      	bpl.n	8004058 <__swrite+0x1e>
 800404c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004050:	2302      	movs	r3, #2
 8004052:	2200      	movs	r2, #0
 8004054:	f000 f868 	bl	8004128 <_lseek_r>
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800405e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004062:	81a3      	strh	r3, [r4, #12]
 8004064:	4632      	mov	r2, r6
 8004066:	463b      	mov	r3, r7
 8004068:	4628      	mov	r0, r5
 800406a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800406e:	f000 b817 	b.w	80040a0 <_write_r>

08004072 <__sseek>:
 8004072:	b510      	push	{r4, lr}
 8004074:	460c      	mov	r4, r1
 8004076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800407a:	f000 f855 	bl	8004128 <_lseek_r>
 800407e:	1c43      	adds	r3, r0, #1
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	bf15      	itete	ne
 8004084:	6560      	strne	r0, [r4, #84]	; 0x54
 8004086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800408a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800408e:	81a3      	strheq	r3, [r4, #12]
 8004090:	bf18      	it	ne
 8004092:	81a3      	strhne	r3, [r4, #12]
 8004094:	bd10      	pop	{r4, pc}

08004096 <__sclose>:
 8004096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800409a:	f000 b813 	b.w	80040c4 <_close_r>
	...

080040a0 <_write_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4d07      	ldr	r5, [pc, #28]	; (80040c0 <_write_r+0x20>)
 80040a4:	4604      	mov	r4, r0
 80040a6:	4608      	mov	r0, r1
 80040a8:	4611      	mov	r1, r2
 80040aa:	2200      	movs	r2, #0
 80040ac:	602a      	str	r2, [r5, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f7fc fed7 	bl	8000e62 <_write>
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	d102      	bne.n	80040be <_write_r+0x1e>
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	b103      	cbz	r3, 80040be <_write_r+0x1e>
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	bd38      	pop	{r3, r4, r5, pc}
 80040c0:	2000053c 	.word	0x2000053c

080040c4 <_close_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	4d06      	ldr	r5, [pc, #24]	; (80040e0 <_close_r+0x1c>)
 80040c8:	2300      	movs	r3, #0
 80040ca:	4604      	mov	r4, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	602b      	str	r3, [r5, #0]
 80040d0:	f7fc fee3 	bl	8000e9a <_close>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_close_r+0x1a>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	b103      	cbz	r3, 80040de <_close_r+0x1a>
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	2000053c 	.word	0x2000053c

080040e4 <_fstat_r>:
 80040e4:	b538      	push	{r3, r4, r5, lr}
 80040e6:	4d07      	ldr	r5, [pc, #28]	; (8004104 <_fstat_r+0x20>)
 80040e8:	2300      	movs	r3, #0
 80040ea:	4604      	mov	r4, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	602b      	str	r3, [r5, #0]
 80040f2:	f7fc fede 	bl	8000eb2 <_fstat>
 80040f6:	1c43      	adds	r3, r0, #1
 80040f8:	d102      	bne.n	8004100 <_fstat_r+0x1c>
 80040fa:	682b      	ldr	r3, [r5, #0]
 80040fc:	b103      	cbz	r3, 8004100 <_fstat_r+0x1c>
 80040fe:	6023      	str	r3, [r4, #0]
 8004100:	bd38      	pop	{r3, r4, r5, pc}
 8004102:	bf00      	nop
 8004104:	2000053c 	.word	0x2000053c

08004108 <_isatty_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	4d06      	ldr	r5, [pc, #24]	; (8004124 <_isatty_r+0x1c>)
 800410c:	2300      	movs	r3, #0
 800410e:	4604      	mov	r4, r0
 8004110:	4608      	mov	r0, r1
 8004112:	602b      	str	r3, [r5, #0]
 8004114:	f7fc fedd 	bl	8000ed2 <_isatty>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_isatty_r+0x1a>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	b103      	cbz	r3, 8004122 <_isatty_r+0x1a>
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	2000053c 	.word	0x2000053c

08004128 <_lseek_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4d07      	ldr	r5, [pc, #28]	; (8004148 <_lseek_r+0x20>)
 800412c:	4604      	mov	r4, r0
 800412e:	4608      	mov	r0, r1
 8004130:	4611      	mov	r1, r2
 8004132:	2200      	movs	r2, #0
 8004134:	602a      	str	r2, [r5, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	f7fc fed6 	bl	8000ee8 <_lseek>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d102      	bne.n	8004146 <_lseek_r+0x1e>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	b103      	cbz	r3, 8004146 <_lseek_r+0x1e>
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	bd38      	pop	{r3, r4, r5, pc}
 8004148:	2000053c 	.word	0x2000053c

0800414c <__malloc_lock>:
 800414c:	4801      	ldr	r0, [pc, #4]	; (8004154 <__malloc_lock+0x8>)
 800414e:	f7ff bb1d 	b.w	800378c <__retarget_lock_acquire_recursive>
 8004152:	bf00      	nop
 8004154:	20000530 	.word	0x20000530

08004158 <__malloc_unlock>:
 8004158:	4801      	ldr	r0, [pc, #4]	; (8004160 <__malloc_unlock+0x8>)
 800415a:	f7ff bb18 	b.w	800378e <__retarget_lock_release_recursive>
 800415e:	bf00      	nop
 8004160:	20000530 	.word	0x20000530

08004164 <_read_r>:
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	4d07      	ldr	r5, [pc, #28]	; (8004184 <_read_r+0x20>)
 8004168:	4604      	mov	r4, r0
 800416a:	4608      	mov	r0, r1
 800416c:	4611      	mov	r1, r2
 800416e:	2200      	movs	r2, #0
 8004170:	602a      	str	r2, [r5, #0]
 8004172:	461a      	mov	r2, r3
 8004174:	f7fc fe58 	bl	8000e28 <_read>
 8004178:	1c43      	adds	r3, r0, #1
 800417a:	d102      	bne.n	8004182 <_read_r+0x1e>
 800417c:	682b      	ldr	r3, [r5, #0]
 800417e:	b103      	cbz	r3, 8004182 <_read_r+0x1e>
 8004180:	6023      	str	r3, [r4, #0]
 8004182:	bd38      	pop	{r3, r4, r5, pc}
 8004184:	2000053c 	.word	0x2000053c

08004188 <_init>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	bf00      	nop
 800418c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800418e:	bc08      	pop	{r3}
 8004190:	469e      	mov	lr, r3
 8004192:	4770      	bx	lr

08004194 <_fini>:
 8004194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004196:	bf00      	nop
 8004198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419a:	bc08      	pop	{r3}
 800419c:	469e      	mov	lr, r3
 800419e:	4770      	bx	lr
